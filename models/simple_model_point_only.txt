var objects = [
{ shape: "triangle", id:1, location: "left"},  
{ shape: "triangle", id:2, location: "right"},
{ shape: "circle", id:1, location: "right"},
//{ shape: "circle", id:2, location: "left"} // control condition
]

// set of utterances
var utterances = ["left", "right"]


// no priors manipulation /speaker change 
var objectPrior = function() {
 var obj = categorical({vs: objects, ps: [0.25,0.25,0.5] })
//  var obj = categorical({vs: objects, ps: [0.25,0.25,0.25,0.25] }) // control condition
 return obj 
} 

// prior favors triangle (preference)
/* var objectPrior = function() {
 var obj = categorical({vs: objects, ps: [0.48,0.48,0.04] })
 return obj 
} */

// prior favors circle (preference)
/* var objectPrior = function() {
 var obj = categorical({vs: objects, ps: [0.02,0.02,0.96] })
 return obj 
} */


// meaning function to interpret the utterances
var meaning = function(utterance, obj){
 _.includes(obj, utterance)
}

var literalListener = function(utterance){
 Infer({model: function(){
   var obj = objectPrior();
   condition(meaning(utterance, obj))
   return obj.shape
 }})
}

// set speaker optimality
var alpha = 1


// pragmatic speaker
var speaker = function(obj){
 Infer({model: function(){
   var utterance = uniformDraw(utterances)
   factor(alpha * literalListener(utterance).score(obj))
   return utterance
 }})
}

// pragmatic listener
var pragmaticListener = function(utterance){
 Infer({model: function(){
   var obj = objectPrior()
   observe(speaker(obj.shape),utterance)
   return obj.shape
 }})
}


viz.table(pragmaticListener("right"))
viz.table(speaker("triangle"))
viz.table(literalListener("right"))