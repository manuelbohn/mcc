inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(subid)]
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
inf.data$trial[inf.data$trial=="train3"]="train"
inf.data$trial[inf.data$trial=="train4"]="train"
## importing data
d <- inf.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
## performance in training and test
d %>%
group_by(trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial_type == "test") %>%
group_by(control, subid) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = control, y = correct, col = control, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p1, aes(x = control, y = mean, col = control, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
p <- d %>%
filter(trial_type == "test") %>%
group_by(age, subid) %>%
summarise(correct = mean(correct))
p
files <- dir("~/Work/MCC/git-mcc/kids_info_pilot/moving_agent")
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_info_pilot/moving_agent/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
inf.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.control","^data.rt", "^data.correct"))
names(inf.data) = c("test_date","alltrial","subid","age","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","control","rt","correct")
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(subid)]
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
inf.data$trial[inf.data$trial=="train3"]="train"
inf.data$trial[inf.data$trial=="train4"]="train"
## importing data
d <- inf.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
## performance in training and test
d %>%
group_by(trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial_type == "test") %>%
group_by(age, subid) %>%
summarise(correct = mean(correct))
p
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = age, y = correct, col = age, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p1, aes(x = age, y = mean, col = age, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
p1
p
files <- dir("~/Work/MCC/git-mcc/kids_info_pilot/moving_turning")
#combine files into one dataframe
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_info_pilot/moving_turning/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
inf.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.control","^data.rt", "^data.correct"))
names(inf.data) = c("test_date","alltrial","subid","age","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","control","rt","correct")
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(subid)]
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
inf.data$trial[inf.data$trial=="train3"]="train"
inf.data$trial[inf.data$trial=="train4"]="train"
## importing data
d <- inf.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
## performance in training and test
d %>%
group_by(trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial_type == "test") %>%
group_by(age, subid) %>%
summarise(correct = mean(correct))
p
p <- d %>%
filter(trial_type == "test") %>%
group_by( subid) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
p <- d %>%
filter(trial_type == "test") %>%
group_by(control, subid) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = control, y = correct, col = control, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p1, aes(x = control, y = mean, col = control, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
files <- dir("~/Work/MCC/git-mcc/kids_info_pilot/filler")
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_info_pilot/filler/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
inf.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.control","^data.rt", "^data.correct"))
names(inf.data) = c("test_date","alltrial","subid","age","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","control","rt","correct")
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(subid)]
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
inf.data$trial[inf.data$trial=="train3"]="train"
inf.data$trial[inf.data$trial=="train4"]="train"
## importing data
d <- inf.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
## performance in training and test
d %>%
group_by(age,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial_type == "test") %>%
group_by(control, subid) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = control, y = correct, col = control, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p1, aes(x = control, y = mean, col = control, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
files <- dir("~/Work/MCC/git-mcc/kids_info_pilot/filler")
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_info_pilot/filler/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
inf.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.control","^data.rt", "^data.correct"))
names(inf.data) = c("test_date","alltrial","subid","age","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","control","rt","correct")
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(subid)]
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
inf.data$trial[inf.data$trial=="train3"]="train"
inf.data$trial[inf.data$trial=="train4"]="train"
## importing data
d <- inf.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
## performance in training and test
d %>%
group_by(age,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial_type == "test") %>%
group_by(control, subid) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = control, y = correct, col = control, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p1, aes(x = control, y = mean, col = control, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
p1
p
p <- d %>%
filter(trial_type == "test") %>%
group_by(control, subid) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
p
mean(p$correct)
ggplot() +
geom_jitter(data = p, aes(x = control, y = correct, col = control, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p1, aes(x = control, y = mean, col = control, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
files <- dir("~/Work/MCC/git-mcc/kids_novel_pilot/")
#combine files into one dataframe
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_novel_pilot/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
novel.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.altAgent","^data.leftFruit","^data.rightFruit","^data.pick","^data.novel","^data.trial","^data.speakerChange","^data.rt", "^data.correct"))
names(novel.data) = c("test_date","alltrial","subid","age","condition","agent","altAgent","leftObject","rightObject","pick","target","trial","change","rt","correct")
novel.data$pick= str_sub(novel.data$pick,115,str_length(novel.data$pick)-4)
novel.data = novel.data[!duplicated(novel.data), ]
novel.data = novel.data[order(subid)]
novel.data
## importing data
d <- novel.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
## performance in training and test
d %>%
group_by(change,age,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial_type == "test") %>%
group_by(change, subid) %>%
summarise(correct = mean(correct))
p
files <- dir("~/Work/MCC/git-mcc/kids_novel_pilot")
#combine files into one dataframe
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_novel_pilot/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
novel.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.altAgent","^data.leftFruit","^data.rightFruit","^data.pick","^data.novel","^data.trial","^data.speakerChange","^data.rt", "^data.correct"))
names(novel.data) = c("test_date","alltrial","subid","age","condition","agent","altAgent","leftObject","rightObject","pick","target","trial","change","rt","correct")
novel.data$pick= str_sub(novel.data$pick,115,str_length(novel.data$pick)-4)
novel.data = novel.data[!duplicated(novel.data), ]
novel.data = novel.data[order(subid)]
novel.data
# convert into short format, drop unnecessary columns, rename variables and sort by id
novel.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.altAgent","^data.leftFruit","^data.rightFruit","^data.pick","^data.novel","^data.trial","^data.speakerChange","^data.rt", "^data.correct"))
novel.data
raw <- bind_rows(raw, id)
raw
d
## importing data
d <- novel.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))%>%
filter(trial != "7",trial != "8" )
novel.data
files <- dir("~/Work/MCC/git-mcc/kids_novel_pilot")
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_novel_pilot/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
novel.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.altAgent","^data.leftFruit","^data.rightFruit","^data.pick","^data.novel","^data.trial","^data.speakerChange","^data.rt", "^data.correct"))
names(novel.data) = c("test_date","alltrial","subid","age","condition","agent","altAgent","leftObject","rightObject","pick","target","trial","change","rt","correct")
novel.data$pick= str_sub(novel.data$pick,115,str_length(novel.data$pick)-4)
novel.data = novel.data[!duplicated(novel.data), ]
novel.data = novel.data[order(subid)]
## importing data
d <- novel.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
## performance in training and test
d %>%
group_by(change,age,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial_type == "test") %>%
group_by(change, subid) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = change, y = correct, col = change, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p1, aes(x = change, y = mean, col = change, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
## importing data
d <- novel.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))%>%
filter(trial != "7", trial != "8")
## performance in training and test
d %>%
group_by(change,age,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
## performance in training and test
d %>%
group_by(age,chnage,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
## performance in training and test
d %>%
group_by(age,chnage,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
## performance in training and test
d %>%
group_by(age,change,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial_type == "test") %>%
group_by(change, subid) %>%
summarise(correct = mean(correct))
p
###
library(tidyverse)
library(knitr)
library(langcog)
library(ggthemes)
## importing data
d <- novel.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
d
## importing data
d <- novel.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
## performance in training and test
d %>%
group_by(age,change,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial != "train")
p
p <- d %>%
filter(trial != "train") %>%
group_by(change, subid) %>%
summarise(correct = mean(correct))
p
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = change, y = correct, col = change, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p1, aes(x = change, y = mean, col = change, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
ggplot() +
geom_jitter(data = p, aes(x = change, y = correct, col = change, alpha = .2),width = .3,height = .01)+
geom_pointrange(data = p1, aes(x = change, y = mean, col = change, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
## importing data
d <- novel.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))%>%
filter(trial != "7", trial != "8")
d
## performance in training and test
d %>%
group_by(age,change,trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
p <- d %>%
filter(trial != "train") %>%
group_by(change, subid) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = change, y = correct, col = change, alpha = .2),width = .3,height = .01)+
geom_pointrange(data = p1, aes(x = change, y = mean, col = change, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
files <- dir("~/Work/MCC/git-mcc/kids_novel_pilot")
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_novel_pilot/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
novel.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.altAgent","^data.leftFruit","^data.rightFruit","^data.pick","^data.novel","^data.trial","^data.speakerChange","^data.rt", "^data.correct"))
names(novel.data) = c("test_date","alltrial","subid","age","condition","agent","altAgent","leftObject","rightObject","pick","target","trial","change","rt","correct")
novel.data$pick= str_sub(novel.data$pick,115,str_length(novel.data$pick)-4)
novel.data = novel.data[!duplicated(novel.data), ]
novel.data = novel.data[order(subid)]
d <- novel.data %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
p <- d %>%
filter(trial != "train") %>%
group_by(change, subid) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = change, y = correct, col = change, alpha = .2),width = .3,height = .01)+
geom_pointrange(data = p1, aes(x = change, y = mean, col = change, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
