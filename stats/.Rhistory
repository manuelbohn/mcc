# combine model predictions and data
ex_4_pred <- bind_rows(
ex_4_model_pred,
adult_ex4_data_summary
)
#saveRDS(ex_4_pred, "../../stats/saves/adult_ex4_model_predictions_data.rds")
ggplot(data = ex_4_pred, aes(x = alignment, y = mean, col = model)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), size = .4,  position = position_dodge(width = .5), pch = 5)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Choosing More Informative")+
facet_grid ( prior_manipulation ~ common_ground_manipulation + speaker) +
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
scale_color_manual(name="Model",
breaks=c("data","pragmatic","flat_prior","prior_only"),
values= c("black","#859900","#6c71c4","#b58900"))+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust = 1))
ex_4_cor_plot <- ex_4_pred %>%
ungroup()%>%
filter(model != "data") %>%
left_join(., ex_4_pred %>%
ungroup()%>%
filter(model == "data") %>%
rename(data_mean = mean, data_ci_lower = ci_lower, data_ci_upper = ci_upper) %>%
select(-model)
)
ggplot(data = ex_4_cor_plot,aes(x = mean, y = data_mean, col = prior_manipulation)) +
geom_abline(intercept = 0, slope = 1, lty = 2, alpha = 0.7, size = 0.5)+
geom_point(size = 2)+
geom_errorbar(aes(ymin = data_ci_lower, ymax = data_ci_upper),width = 0,size = .7)+
geom_errorbarh(aes(xmin = ci_lower, xmax = ci_upper), height = 0,size = .7)+
coord_fixed()+
xlim(0,1)+ylim(0,1)+
xlab("Model")+
ylab("Data")+
facet_grid ( ~ model) +
stat_cor(method = "pearson", label.x = 0.01, label.y = 0.99, aes(x = mean, y = data_mean), inherit.aes = F, size = 3)+
theme_few(base_size = ) +
scale_colour_ptol()
# calculating model log-likelihoods
log_like_pragmatic_ex4 <- adult_ex4_data %>%
left_join(ex4_pragm_model_predictions)%>%
mutate(like = ifelse(correct_inf == 1 , value, 1 - value),
log_like = log(like))%>%
group_by(model)%>%
summarise(model_log_like = sum(log_like))
log_like_flat_prior_ex4 <- adult_ex4_data %>%
left_join(ex4_flat_prior_model_predictions)%>%
mutate(like = ifelse(correct_inf ==  1, value , 1 - value),
log_like = log(like))%>%
group_by(model)%>%
summarise(model_log_like = sum(log_like))
log_like_prior_only_ex4 <- adult_ex4_data %>%
left_join(ex4_prior_only_model_predictions) %>%
mutate(like = ifelse(correct_inf == 1, value, 1 - value),
log_like = log(like))%>%
group_by(model)%>%
summarise(model_log_like = sum(log_like))
ex4_model_comparison <- bind_rows(
log_like_pragmatic_ex4,
log_like_flat_prior_ex4,
log_like_prior_only_ex4
)%>%
mutate(model = reorder(model,model_log_like))
ggplot(ex4_model_comparison, aes(x = model, y = model_log_like, col = model))+
geom_segment( aes(x=model, xend=model, y=-1500, yend=model_log_like), col = "black", size = 1)+
geom_point(size = 7)+
theme_few()+
xlab("Model")+
ylab("Log-likelihood")+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust = 1))+
guides(col = F)+
scale_color_manual(breaks=c("pragmatic","prior_only","flat_prior"),
values= c("#b58900","#859900","#6c71c4"))
# Cauchy prior on the speaker optimality parameter around 1, based on previous work (e.g. Frank & Goodman, 2014)
speakOptParam <- '
var data = dataFromR.data
var model  = function(){
var speakerOptimality = sample(Cauchy({location: 0, scale: 0.1}))
foreach(function(row){
var priorProbs = [.5, .5, .5]
var rsaPredictions = pragmaticListener({label: "dax", point: 2 },
priorProbs, speakerOptimality)
observe(rsaPredictions, row.correct)
}, data)
return speakerOptimality
}
'
adult_model_param<- webppl(
program_code = paste(rsaUtils, rsaModel, speakOptParam , sep='\n'),
data = list(data = adult_ex1_data %>% filter(condition == "test")),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 1000, verbose = T)
)%>%
saveRDS("../../stats/saves/adult_model_param.rds")
adult_model_param <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value) %>%
summarise(so_map = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
# visualize speaker optimality parameter
plot_adult_model_speak_opt <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value)
ggplot(plot_adult_model_speak_opt, aes(value))+
geom_density()+
xlab("Speaker optimality")+
theme_few()
adult_model_param
# Cauchy prior on the speaker optimality parameter around 1, based on previous work (e.g. Frank & Goodman, 2014)
speakOptParam <- '
var data = dataFromR.data
var model  = function(){
var speakerOptimality = sample(Cauchy({location: 1, scale: 2}))
foreach(function(row){
var priorProbs = [.5, .5, .5]
var rsaPredictions = pragmaticListener({label: "dax", point: 2 },
priorProbs, speakerOptimality)
observe(rsaPredictions, row.correct)
}, data)
return speakerOptimality
}
'
adult_model_param<- webppl(
program_code = paste(rsaUtils, rsaModel, speakOptParam , sep='\n'),
data = list(data = adult_ex1_data %>% filter(condition == "test")),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 8000, burn = 2000, verbose = T)
)%>%
saveRDS("../../stats/saves/adult_model_param.rds")
adult_model_param <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value) %>%
summarise(so_map = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
adult_model_param
# visualize speaker optimality parameter
plot_adult_model_speak_opt <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value)
ggplot(plot_adult_model_speak_opt, aes(value))+
geom_density()+
xlab("Speaker optimality")+
theme_few()
adult_model_param<- webppl(
program_code = paste(rsaUtils, rsaModel, speakOptParam , sep='\n'),
data = list(data = adult_ex1_data %>% filter(condition == "test")),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 7000, burn = 3000, verbose = T)
)%>%
saveRDS("../../stats/saves/adult_model_param.rds")
adult_model_param <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value) %>%
summarise(so_map = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
adult_model_param
# visualize speaker optimality parameter
plot_adult_model_speak_opt <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value)
ggplot(plot_adult_model_speak_opt, aes(value))+
geom_density()+
xlab("Speaker optimality")+
theme_few()
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(knitr)
library(ggthemes)
library(langcog)
library(rwebppl)
library(coda)
library(ggpubr)
estimate_mode <- function(s) {
d <- density(s)
return(d$x[which.max(d$y)])
}
hdi_upper<- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","upper"])
}
hdi_lower<- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","lower"])
}
rsaUtils <- '
// three objects: triangle_1 on table 1, triangle_2 and circle_1 on table 2
var all_objects = [
{ shape: "triangle", id:1, location: 1},
{ shape: "triangle", id:2, location: 2},
{ shape: "circle", id:1, location: 2}
]
// listener prior is over types, not tokens (we use uniformDraw on prior_objects)
var prior_objects = [
{ shape: "triangle", id:1, location: 1},
{ shape: "circle", id:1, location: 2}
]
var labels = ["dax","wug"]
// two possible lexica, corresponding to meaning of words "dax" and "wug"
var lexicon1 = function(utterance, obj){
utterance.label == "dax" ? obj.shape == "triangle" :
utterance.label == "wug" ? obj.shape == "circle" :
true
}
var lexicon2 = function(utterance, obj){
utterance.label == "dax" ? obj.shape == "circle" :
utterance.label == "wug" ? obj.shape == "triangle" :
true
}
var lexiconObjects = {
"dax = triangle": {
triangle: "dax", circle: "wug"
},
"dax = circle": {
triangle: "wug", circle: "dax"
},
}
var lexiconObject = {
"dax = triangle": lexicon1,
"dax = circle" : lexicon2
}
var point = function(utterance, obj){
return obj.location == utterance.point
}
var utterancePrior = function(obj, lexiconName){
var locationsWithShape = _.map(_.filter(all_objects, {shape: obj.shape}), "location")
var point = uniformDraw(locationsWithShape)
var label = lexiconObjects[lexiconName][obj.shape]
return {label: label, point: point}
}
var LexiconPrior = Categorical({vs: ["dax = triangle","dax = circle" ], ps: [1, 1]})
var speakerOptimality = 2.25;
var addNoise = function(dist, noiseParam){
Infer({model: function(){
return flip(noiseParam) ? uniformDraw([0, 1]) : sample(dist)
}
})
}
var foreach = function(fn, lst) {
var foreach_ = function(i) {
if (i < lst.length) {
fn(lst[i]);
foreach_(i + 1);
}
};
foreach_(0);
};
var logistic = function(x) {1 / (1 + Math.exp(-x))}
var levels = function(df, label){
return _.uniq(_.map(df, label));
}
'
rsaModel <- '
var literalListener = cache(function(utterance, priorProbs){
Infer({method: "enumerate", model: function(){
var lexiconName = sample(LexiconPrior);
var lexicon = lexiconObject[lexiconName];
var obj = sample( Categorical({vs: all_objects, ps: priorProbs}));
if ("label" in utterance) {
var truthValue = lexicon(utterance, obj);
condition(truthValue)
}
if (utterance.point) {
var truthValuePoint = point(utterance, obj);
condition(truthValuePoint)
}
return obj.shape
}})
})
var speaker = cache(function(obj, lexiconName, priorProbs, speakerOptimality){
Infer({method: "enumerate", model: function(){
var utterance = utterancePrior(obj, lexiconName);
var L0 = literalListener(utterance, priorProbs);
factor(speakerOptimality * L0.score(obj.shape))
return utterance
}})
})
var pragmaticListener = cache(function(utterance, priorProbs, speakerOptimality){
Infer({method: "enumerate", model: function(){
var lexiconName = sample(LexiconPrior);
var obj = sample( Categorical({vs: all_objects, ps: priorProbs}));
var S1 = speaker(obj, lexiconName, priorProbs, speakerOptimality);
observe(S1, utterance)
return obj.shape == "circle" ? 1 : 0
}})
})
var addNoise = function(dist, noiseParam){
Infer({model: function(){
return flip(noiseParam) ? uniformDraw([0, 1]) : sample(dist)
}
})
}
'
# load data from experiment 3
adult_ex3_data <-read_csv(file="../../stats/data/adult_ex3.csv")
# adults exp 1
adult_ex1_data <- read_csv(file="../../stats/data/adult_ex1.csv")
# load data from prior manipulation experiments to set priors
adult_ex2_novelty_data <- read_csv(file="../../stats/data/adult_ex2_novelty.csv")
adult_ex2_preference_data <- read_csv(file="../../stats/data/adult_ex2_preference.csv")
# Cauchy prior on the speaker optimality parameter around 1, based on previous work (e.g. Frank & Goodman, 2014)
speakOptParam <- '
var data = dataFromR.data
var model  = function(){
var speakerOptimality = sample(Cauchy({location: 1, scale: 2}))
foreach(function(row){
var priorProbs = [.5, .5, .5]
var rsaPredictions = pragmaticListener({label: "dax", point: 2 },
priorProbs, speakerOptimality)
observe(rsaPredictions, row.correct)
}, data)
return speakerOptimality
}
'
# adult_model_param<- webppl(
#   program_code = paste(rsaUtils, rsaModel, speakOptParam , sep='\n'),
#   data = list(data = adult_ex1_data %>% filter(condition == "test")),
#   data_var = "dataFromR",
#   model_var = "model",
#   chains = 4,
#   cores = 4,
#   inference_opts = list(method = "MCMC", samples = 6000, burn = 2000, verbose = T)
# )%>%
#   saveRDS("../../stats/saves/adult_model_param.rds")
adult_model_param <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value) %>%
summarise(so_map = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
# visualize speaker optimality parameter
plot_adult_model_speak_opt <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value)
ggplot(plot_adult_model_speak_opt, aes(value))+
geom_density()+
xlab("Speaker optimality")+
theme_few()
# create datafiles with model parameters
model_params_ex3 <- expand.grid(
common_ground_manipulation = c("preference", "novelty"),
speaker = c("same_speaker", "different_speaker"),
speak_opt = adult_model_param$so_map
)
prior_pref_summary <- bind_rows(
adult_ex2_preference_data,
adult_ex2_novelty_data) %>%
group_by(condition, experiment) %>%
summarise(prior = mean(correct)) %>%
mutate(experiment = gsub("adult_ex2_", "", experiment)) %>%
rename(common_ground_manipulation = experiment,
speaker = condition)
model_params_ex3 <- left_join(
model_params_ex3,
prior_pref_summary, by = c("common_ground_manipulation", "speaker")
) %>%
rename(congruent = prior) %>%
mutate(incongruent = 1 - congruent) %>%
gather(alignment, prior, congruent, incongruent)
predictions.rsa.ex3 <-'
var allData = dataFromR.data
var output = map(function(row){
var priorProbLst = [1 - row.prior, 1 - row.prior, row.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, priorProbLst, row.speak_opt)
return extend([row.common_ground_manipulation + "/" + row.speaker + "/" + row.alignment, Math.exp(modelPredictions.score(1))])
}, allData)
output
'
ex3_pragm_model<- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3 , sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR"
)
# model predictions
ex3_pragm_model_predictions <- ex3_pragm_model %>%
separate(`0`, into = c("common_ground_manipulation", "speaker", "alignment"), sep="/")%>%
mutate(value = `1`,
model="pragmatic")%>%
select(-`1`)
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 10, burn = 2, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
predictions.rsa.ex3.noise <-'
var allConditions = dataFromR.allConditions
var allData = dataFromR.allData
var allPriorProbs = dataFromR.predPrior
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var output = map(function(row){
var priorProbLst = [1 - row.prior, 1 - row.prior, row.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, priorProbLst, row.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
return extend([row.common_ground_manipulation + "/" + row.speaker + "/" + row.alignment, Math.exp(modelPredictions.score(1))])
}, allData)
return extend(_.fromPairs(output), {noise: noise})
}
'
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 10, burn = 2, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
predictions.rsa.ex3.noise <-'
var allConditions = dataFromR.allConditions
var allData = dataFromR.allData
var allPriorProbs = dataFromR.predPrior
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var output = map(function(row){
var priorProbLst = [1 - row.prior, 1 - row.prior, row.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, priorProbLst, row.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
return extend([row.common_ground_manipulation + "/" + row.speaker + "/" + row.alignment, Math.exp(modelPredictions.score(1))])
}, allData)
return extend(_.fromPairs(output), {noise: noise})
}
'
predictions.rsa.ex3.noise <-'
var allData = dataFromR.data
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var output = map(function(row){
var priorProbLst = [1 - row.prior, 1 - row.prior, row.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, priorProbLst, row.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
return extend([row.common_ground_manipulation + "/" + row.speaker + "/" + row.alignment, Math.exp(modelPredictions.score(1))])
}, allData)
return extend(_.fromPairs(output), {noise: noise})
}
'
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 10, burn = 2, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 1000, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
## noise parameter
ex3_pragm_model_noise <- ex3_pragm_model %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
readRDS("../../stats/saves/ex3_pragm_model_noise.rds")
predictions.rsa.ex3.noise <-'
var allData = dataFromR.data
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var output = map(function(row){
var priorProbLst = [1 - row.prior, 1 - row.prior, row.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, priorProbLst, row.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
return extend([row.common_ground_manipulation + "/" + row.speaker + "/" + row.alignment, Math.exp(noisyModelPredictions.score(1))])
}, allData)
return extend(_.fromPairs(output), {noise: noise})
}
'
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 1000, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
ex3_pragm_model_predictions_noise <- readRDS("../../stats/saves/ex3_pragm_model_noise.rds")
ex3_pragm_model_predictions_noise
model_params_ex3
## noise parameter
ex3_pragm_model_noise <- readRDS("../../stats/saves/ex3_pragm_model_noise.rds")  %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
ex3_pragm_model_noise
model_params_ex3
