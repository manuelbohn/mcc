filter(Parameter == "noise_int")%>%
pull(mean),41),
rep(child_ex3_flat_prior_model_developmental_noise_param%>%
filter(Parameter == "noise_int")%>%
pull(mean),41),
rep(child_ex3_prior_only_model_developmental_noise_param%>%
filter(Parameter == "noise_int")%>%
pull(mean),41)
),
slope = c(rep(child_ex3_pragm_model_developmental_noise_param%>%
filter(Parameter == "noise_slope")%>%
pull(mean),41),
rep(child_ex3_flat_prior_model_developmental_noise_param%>%
filter(Parameter == "noise_slope")%>%
pull(mean),41),
rep(child_ex3_prior_only_model_developmental_noise_param%>%
filter(Parameter == "noise_slope")%>%
pull(mean),41))
) %>%
mutate(y = plogis(int + slope *age))
ggplot(developmental_noise_parameter, aes(x = age, y= y, col = model))+
geom_line(size = 1)+
ylab("Noise parameter")+
xlab("Age")+
ylim(0,1)+
theme_few()+
scale_color_manual(breaks=c("pragmatic","prior_only","flat_prior"),
values= c("#b58900","#6c71c4","#859900"))
child_model_predictions <- bind_rows(
child_ex3_pragm_model_predictions_noise,
child_ex3_pragm_model_predictions_developmental_noise,
child_ex3_pragm_model_predictions
#child_ex3_prior_only_model_predictions_noise,
#child_ex3_flat_prior_model_predictions_noise
#child_ex3_flat_prior_model_predictions,
#child_ex3_prior_only_model_predictions
)
#saveRDS(child_model_predictions, "../../stats/saves/child_ex3_model_predictions.rds")
plot_child_ex3_data <- child_ex3_data%>%
group_by(age_num,speaker,alignment)%>%
summarise(mean = mean(correct_inf))
ggplot(child_model_predictions)+
geom_jitter(data = plot_child_ex3_data, aes(x = age_num, y = mean), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper, fill = model), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
#geom_smooth(data = child_ex3_data, aes(x = age_num, y = correct_inf), col = "black", size = 0.6, method = "loess", span = 2,  se = T,  alpha = .5)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="Proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(~speaker+alignment)+
theme_few()+
theme(legend.position="bottom")+
scale_color_manual(name="Model",
breaks=c("pragmatic","pragmatic_noise","pragmatic_developmental_noise"),
values= c("#00afaf","#af6300","#6c71c4"))+
scale_fill_manual(name="Model",
breaks=c("pragmatic","pragmatic_noise","pragmatic_developmental_noise"),
values= c("#00afaf","#af6300","#6c71c4"))
child_cor_data <- child_ex3_data %>%
group_by(age_bin,speaker, alignment) %>%
summarize(k = sum(correct_inf), n = n())%>%
ungroup() %>%
mutate(a = 1 + k,
b = 1 + n - k,
data_ci_lower  = qbeta(.025, a, b),
data_ci_upper = qbeta(.975, a, b),
data_mode = (a-1)/(a+b-2))%>%
select(-a,-b,-n,-k)
child_cor_model <- bind_rows(
child_ex3_pragm_model %>%
separate(`0`, into = c("age", "speaker", "alignment","correct"), sep="/")%>%
mutate(value = `1`,
model = "pragmatic_parameter_free",
age = ifelse(age<4,"3","4"))%>%
group_by(age,model,speaker,alignment)%>%
summarise(model_mode = estimate_mode(value),
model_ci_lower = hdi_lower(value),
model_ci_upper =hdi_upper(value)),
readRDS("../../stats/saves/child_ex3_pragm_model_noise.rds") %>%
filter(!(Parameter %in% c("noise"))) %>%
separate(Parameter, into = c("age", "speaker", "alignment"), sep="/")%>%
mutate(model = "pragmatic_noise",
age = ifelse(age<4,"3","4"))%>%
group_by(age,model,speaker,alignment) %>%
summarise(model_mode = estimate_mode(value),
model_ci_lower = hdi_lower(value),
model_ci_upper =hdi_upper(value)),
readRDS("../../stats/saves/child_ex3_pragm_model_developmental_noise.rds") %>%
filter(!(Parameter %in% c("noise","noise_int","noise_slope"))) %>%
separate(Parameter, into = c("age", "speaker", "alignment"), sep="/")%>%
mutate(model = "pragmatic_developmental_noise",
age = ifelse(age<4,"3","4"))%>%
group_by(age,model,speaker,alignment) %>%
summarise(model_mode = estimate_mode(value),
model_ci_lower = hdi_lower(value),
model_ci_upper =hdi_upper(value))
)
child_cor_plot <- child_cor_model %>%
ungroup()%>%
mutate(data_mode = rep(child_cor_data$data_mode,3),
data_ci_lower = rep(child_cor_data$data_ci_lower,3),
data_ci_upper  =rep( child_cor_data$data_ci_upper,3))
ggplot(data = child_cor_plot,aes(x = model_mode, y = data_mode, col = age)) +
geom_abline(intercept = 0, slope = 1, lty = 2, alpha = 1, size = .5)+
geom_point(size = 3)+
geom_errorbar(aes(ymin = data_ci_lower, ymax = data_ci_upper),width = 0,size = .7)+
geom_errorbarh(aes(xmin = model_ci_lower, xmax = model_ci_upper), height = 0,size = .7)+
coord_fixed()+
facet_grid(~model)+
stat_cor(method = "pearson", label.x = 0.01, label.y = 0.99, aes(x = model_mode, y = data_mode), inherit.aes = F)+
xlim(0,1)+ylim(0,1)+
xlab("Model")+
theme_few() +
scale_colour_ptol()
child.ex3.rsa.marginal.likelihood <-'
var allData = dataFromR.allData
var model = function(){
var output = map(function(row){
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, row.priorProbs,row.so)
observe(modelPredictions, row.correct_inf)
}, allData)
}
var steps = 5000
var samples = 1
var mll = AIS(model, {steps:steps, samples: samples})
mll
'
# child_ex3_pragm_model_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.rsa.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_pragm_model_loglike.rds")
child_ex3_pragm_model_likelihood <- readRDS("../../stats/saves/child_ex3_pragm_model_loglike.rds")%>%
as.tibble()%>%
mutate(model = "pragmatic",
parameter = "parameter free")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
child.ex3.rsa.noise.marginal.likelihood <-'
var allData = dataFromR.allData
var model = function(){
var noise = uniform({a: 0, b: 1})
var output = map(function(row){
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, row.priorProbs,row.so)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
}, allData)
}
var steps = 5000
var samples = 1
var mll = AIS(model, {steps:steps, samples: samples})
mll
'
# child_ex3_pragm_model_noise_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.rsa.noise.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_pragm_model_noise_loglike.rds")
child_ex3_pragm_model_noise_likelihood <- readRDS("../../stats/saves/child_ex3_pragm_model_noise_loglike.rds")%>%
as.tibble()%>%
mutate(model = "pragmatic",
parameter = "noise")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
child.ex3.rsa.developmental.noise.marginal.likelihood <-'
var allData = dataFromR.allData
var model = function(){
var noise_slope = uniformDrift({a: -5, b: 5, width: 0.2})
var noise_int = uniformDrift({a: -5, b: 5, width: 0.1})
var output = map(function(row){
var noise = logistic(noise_int + noise_slope * (row.age_num-row.minage))
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, row.priorProbs,row.so)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
}, allData)
}
var steps = 5000
var samples = 1
var mll = AIS(model, {steps:steps, samples: samples})
mll
'
# child_ex3_pragm_model_developmental_noise_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.rsa.developmental.noise.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_pragm_model_developmenatl_noise_loglike.rds")
child_ex3_pragm_model_developmental_noise_likelihood <- readRDS("../../stats/saves/child_ex3_pragm_model_developmenatl_noise_loglike.rds")%>%
as.tibble()%>%
mutate(model = "pragmatic",
parameter = "developmental noise")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
child.ex3.flat.prior.marginal.likelihood <-'
var allData = dataFromR.allData
var model = function(){
var noise = uniform({a: 0, b: 1})
var output = map(function(row){
var prior = [.5,.5,.5]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, prior,row.so)
observe(modelPredictions, row.correct_inf)
}, allData)
}
var steps = 5000
var samples = 1
var mll = AIS(model, {steps:steps, samples: samples})
mll
'
# child_ex3_flat_prior_model_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.flat.prior.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_flat_prior_model_loglike.rds")
child_ex3_flat_prior_model_likelihood <- readRDS("../../stats/saves/child_ex3_flat_prior_model_loglike.rds")%>%
as.tibble()%>%
mutate(model = "flat_prior",
parameter = "parameter free")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
child.ex3.flat.prior.noise.marginal.likelihood <-'
var allData = dataFromR.allData
var model = function(){
var noise = uniform({a: 0, b: 1})
var output = map(function(row){
var prior = [.5,.5,.5]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, prior,row.so)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
}, allData)
}
var steps = 5000
var samples = 1
var mll = AIS(model, {steps:steps, samples: samples})
mll
'
# child_ex3_flat_prior_model_noise_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.flat.prior.noise.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_flat_prior_model_noise_loglike.rds")
child_ex3_flat_prior_model_noise_likelihood <- readRDS("../../stats/saves/child_ex3_flat_prior_model_noise_loglike.rds")%>%
as.tibble()%>%
mutate(model = "flat_prior",
parameter = "noise")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
child.ex3.flat.prior.developmental.noise.marginal.likelihood <-'
var allData = dataFromR.allData
var model = function(){
var noise_slope = uniformDrift({a: -5, b: 5, width: 0.2})
var noise_int = uniformDrift({a: -5, b: 5, width: 0.1})
var output = map(function(row){
var noise = logistic(noise_int + noise_slope * (row.age_num-row.minage))
var prior = [.5,.5,.5]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, prior,row.so)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
}, allData)
}
var steps = 5000
var samples = 1
var mll = AIS(model, {steps:steps, samples: samples})
mll
'
# child_ex3_flat_prior_model_developmental_noise_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.flat.prior.developmental.noise.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_flat_prior_model_developmental_noise_loglike.rds")
child_ex3_flat_prior_model_developmental_noise_likelihood <- readRDS("../../stats/saves/child_ex3_flat_prior_model_developmental_noise_loglike.rds")%>%
as.tibble()%>%
mutate(model = "flat_prior",
parameter = "developmental noise")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
child.ex3.prior.only.marginal.likelihood <-'
var allData = dataFromR.allData
var model = function(){
var noise = uniform({a: 0, b: 1})
var output = map(function(row){
var modelPredictions = Infer({method: "enumerate", model: function(){
var obj = sample( Categorical({vs: all_objects, ps: row.priorProbs}));
return obj.shape == "circle" ? 1 : 0
}})
observe(modelPredictions, row.correct_inf)
}, allData)
}
var steps = 5000
var samples = 1
var mll = AIS(model, {steps:steps, samples: samples})
mll
'
# child_ex3_prior_only_model_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.prior.only.noise.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_prior_only_model_loglike.rds")
child_ex3_prior_only_model_likelihood <- readRDS("../../stats/saves/child_ex3_prior_only_model_loglike.rds")%>%
as.tibble()%>%
mutate(model = "prior_only",
parameter = "parameter free")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
child.ex3.prior.only.noise.marginal.likelihood <-'
var allData = dataFromR.allData
var model = function(){
var noise = uniform({a: 0, b: 1})
var output = map(function(row){
var modelPredictions = Infer({method: "enumerate", model: function(){
var obj = sample( Categorical({vs: all_objects, ps: row.priorProbs}));
return obj.shape == "circle" ? 1 : 0
}})
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
}, allData)
}
var steps = 5000
var samples = 1
var mll = AIS(model, {steps:steps, samples: samples})
mll
'
# child_ex3_prior_only_model_noise_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.prior.only.noise.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_prior_only_model_noise_loglike.rds")
child_ex3_prior_only_model_noise_likelihood <- readRDS("../../stats/saves/child_ex3_prior_only_model_noise_loglike.rds")%>%
as.tibble()%>%
mutate(model = "prior_only",
parameter = "noise")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
child.ex3.prior.only.developmental.noise.marginal.likelihood <-'
var allData = dataFromR.allData
var model = function(){
var noise_slope = uniformDrift({a: -5, b: 5, width: 0.2})
var noise_int = uniformDrift({a: -5, b: 5, width: 0.1})
var output = map(function(row){
var noise = logistic(noise_int + noise_slope * (row.age_num-row.minage))
var modelPredictions = Infer({method: "enumerate", model: function(){
var obj = sample( Categorical({vs: all_objects, ps: row.priorProbs}));
return obj.shape == "circle" ? 1 : 0
}})
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
}, allData)
}
var steps = 5000
var samples = 1
var mll = AIS(model, {steps:steps, samples: samples})
mll
'
# child_ex3_prior_only_model_developmental_noise_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.prior.only.developmental.noise.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_prior_only_model_developmental_noise_loglike.rds")
child_ex3_prior_only_model_developmental_noise_likelihood <- readRDS("../../stats/saves/child_ex3_prior_only_model_developmental_noise_loglike.rds")%>%
as.tibble()%>%
mutate(model = "prior_only",
parameter = "developmental noise")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
# calculating model log-likelihoods
child_ex3_model_comparison <- bind_rows(
child_ex3_pragm_model_likelihood,
child_ex3_pragm_model_noise_likelihood,
child_ex3_pragm_model_developmental_noise_likelihood,
child_ex3_flat_prior_model_noise_likelihood,
child_ex3_flat_prior_model_likelihood,
child_ex3_flat_prior_model_developmental_noise_likelihood,
child_ex3_prior_only_model_noise_likelihood,
child_ex3_prior_only_model_likelihood,
child_ex3_prior_only_model_developmental_noise_likelihood
)%>%
ungroup()%>%
mutate(model = reorder(model,logP))
# child_ex3_prior_only_model_developmental_noise_likelihood<- webppl(
#   program_code = paste(rsaUtils, rsaModel, child.ex3.prior.only.developmental.noise.marginal.likelihood , sep='\n'),
#   data =list(allData = ex3_model_data),
#   data_var = "dataFromR",
#   chains = 3,
#   cores = 3
# )%>%
#   saveRDS("../../stats/saves/child_ex3_prior_only_model_developmental_noise_loglike.rds")
child_ex3_prior_only_model_developmental_noise_likelihood <- readRDS("../../stats/saves/child_ex3_prior_only_model_developmental_noise_loglike.rds")%>%
as.tibble()%>%
mutate(model = "prior_only",
parameter = "developmental noise")%>%
group_by(model,parameter)%>%
summarise(logP = mean(V1))
child_ex3_model_comparison <- bind_rows(
child_ex3_pragm_model_likelihood,
child_ex3_pragm_model_noise_likelihood,
child_ex3_pragm_model_developmental_noise_likelihood,
child_ex3_flat_prior_model_noise_likelihood,
child_ex3_flat_prior_model_likelihood,
child_ex3_flat_prior_model_developmental_noise_likelihood,
child_ex3_prior_only_model_noise_likelihood,
child_ex3_prior_only_model_likelihood,
child_ex3_prior_only_model_developmental_noise_likelihood
)%>%
ungroup()%>%
mutate(model = reorder(model,logP))
child_ex3_model_comparison
child_ex3_model_comparison %>%
saveRDS("../../stats/saves/child_ex3_model_comparison.rds")
child_ex3_pragmatic_models_bf <- child_ex3_model_comparison%>%
filter(model == "pragmatic")%>%
spread(parameter, logP) %>%
mutate("dev. noise > noise" = `developmental noise` - noise,
"noise > parameter free" = noise - `parameter free`,
"dev. noise > parameter free" = `developmental noise` - `parameter free`) %>%
select(-`parameter free`,-`developmental noise`, -noise)
child_ex3_pragmatic_models_bf%>%
kable(digits = 2)
child_ex3_bf <- child_ex3_model_comparison%>%
group_by(parameter)%>%
spread(model, logP) %>%
mutate("pragmatic > flat_prior" = pragmatic - flat_prior,
"pragmatic > prior_only" = pragmatic - prior_only,
"flat_prior > prior_only" = flat_prior - prior_only) %>%
select(-pragmatic,-flat_prior, -prior_only)
child_ex3_bf%>%
kable(digits = 2)
child_ex3_bf <- readRDS("../../stats/saves/child_ex3_model_comparison.rds") %>%
group_by(parameter)%>%
spread(model, logP) %>%
mutate("pragmatic > flat_prior" = pragmatic - flat_prior,
"pragmatic > prior_only" = pragmatic - prior_only,
"flat_prior > prior_only" = flat_prior - prior_only) %>%
select(-pragmatic,-flat_prior, -prior_only)
child_ex3_bf
child_ex3_bf <- readRDS("../../stats/saves/child_ex3_model_comparison.rds") %>%
group_by(parameter)%>%
spread(model, logP) %>%
mutate("pragmatic > flat_prior" = pragmatic - flat_prior,
"pragmatic > prior_only" = pragmatic - prior_only,
"flat_prior > prior_only" = flat_prior - prior_only) %>%
select(-pragmatic,-flat_prior, -prior_only)
child_ex3_bf <- readRDS("../../stats/saves/child_ex3_model_comparison.rds") %>%
group_by(parameter)%>%
spread(model, logP) %>%
mutate("pragmatic > flat_prior" = exp(pragmatic - flat_prior),
"pragmatic > prior_only" = exp(pragmatic - prior_only),
"flat_prior > prior_only" = exp(flat_prior - prior_only)) %>%
select(-pragmatic,-flat_prior, -prior_only)
child_ex3_bf
child_ex3_bf <- readRDS("../../stats/saves/child_ex3_model_comparison.rds") %>%
group_by(parameter)%>%
spread(model, logP) %>%
mutate("pragmatic_flat_prior" = exp(pragmatic - flat_prior),
"pragmatic_prior_only" = exp(pragmatic - prior_only),
"flat_prior_prior_only" = exp(flat_prior - prior_only)) %>%
select(-pragmatic,-flat_prior, -prior_only)
child_ex3_bf
ormat(child_ex3_bf%>%filter (parameter=="noise")%>%pull(pragmatic_flat_prior), digits = 2)
format(child_ex3_bf%>%filter (parameter=="noise")%>%pull(pragmatic_flat_prior), digits = 2)`) or the prior only model (BF = `r format(ex4_bf%>%pull(pragmatic_noise_prior_only_noise), digits = 2)
format(child_ex3_bf%>%filter (parameter=="noise")%>%pull(pragmatic_flat_prior), digits = 2)
format(child_ex3_bf%>%filter (parameter=="noise")%>%pull(pragmatic_prior_only), digits = 2)
child_ex3_pragm_model_noise_param <- readRDS("../../stats/saves/child_ex3_pragm_model_noise.rds") %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
child_ex3_pragm_model_noise_param
child_ex3_bf
child_ex3_bf
child_ex3_bf
format(child_ex3_bf%>%filter (parameter=="parameter free")%>%pull(pragmatic_prior_only)
format(child_ex3_bf%>%filter (parameter=="parameter free")%>%pull(pragmatic_prior_only), digits = 2)
format(child_ex3_bf%>%filter (parameter=="developmental noise")%>%pull(pragmatic_prior_only), digits = 2)
format(child_ex3_bf%>%filter (parameter=="parameter free")%>%pull(pragmatic_flat_prior), digits = 2)
format(child_ex3_bf%>%filter (parameter=="developmental noise")%>%pull(pragmatic_flat_prior)
format(child_ex3_bf%>%filter (parameter=="developmental noise")%>%pull(pragmatic_flat_prior), digits = 2)
child_ex3_lm_data <- child_ex3_data%>%
mutate(age_num = scale(age_num, center = TRUE, scale = TRUE))
child_ex3_lm
child_lm_ex3_r <- tidy(child_ex3_lm, effects = "fixed")%>%
mutate(p.value = ifelse(p.value<.001,"< .001",as.character(paste("=",substr(round(p.value,3),2,5),sep=" "))),
std.error = round(std.error,2),
estimate = round(estimate,2))
child_lm_ex3_r
child_lm_ex3_r%>%filter(term == "age_num:speakersame:alignmentincongruent")%>%pull(estimate)
child_lm_ex3_r%>%filter(term == "age_num:speakersame:alignmentincongruent")%>%pull(std.error)
child_lm_ex3_r%>%filter(term == "age_num:speakersame:alignmentincongruent")%>%pull(p.value)
