labels=c("No", "Yes"))
p1 <- d %>%
filter(trial_type == "test") %>%
group_by(control,age, subid) %>%
summarise(correct = mean(correct))
p2 <- p1 %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p1, aes(x = control, y = correct, col = control, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p2, aes(x = control, y = mean, col = control, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
facet_wrap(~age)+
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
p5 <- d%>%
mutate(pick_position = ifelse(targetOnTable == "inner" & correct == 1, "inner",
ifelse(targetOnTable == "outer" & correct == 1, "outer",
ifelse(targetOnTable == "inner" & correct == 0, "outer",
ifelse(targetOnTable == "outer" & correct == 0, "inner",NA)))),
age = factor(age),
control = ifelse(control == "true", "control", "test"))%>%
group_by(age,control)%>%
summarise(pick_inner = sum(pick_position == "inner")/length(pick_position))
ggplot(p5, aes(x = control, y = pick_inner, fill = age))+
geom_bar(stat="identity", color = "black")+
ylim(-0.05,1.05)+
facet_wrap(~age)+
theme_few() +
geom_hline(yintercept = 0.5, lty=2)+
scale_colour_solarized()
d %>%
group_by(targetOnTable)%>%
summarise(n = length(unique(subid)))%>%
knitr::kable(digits = 2)
d %>%
group_by(targetOnTable)%>%
summarise(n = length(subid))%>%
knitr::kable(digits = 2)
d %>%
group_by(age,targetOnTable)%>%
summarise(n = length(subid))%>%
knitr::kable(digits = 2)
files <- dir("~/Work/MCC/git-mcc/nosub_informativeness2/production-results")
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/nosub_informativeness2/production-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
data = jd$answers$data$data
)
raw <- bind_rows(raw, id)
}
inf.data= melt(setDT(raw), measure = patterns( "^data.condition","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.control","^data.rt", "^data.correct"))
names(inf.data) = c("id","alltrial","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","control","rt","correct")
inf.data $pick= str_sub(inf.data $pick,80,str_length(inf.data $pick)-4)
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(id)]
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
# check resulting datafile
str(inf.data)
head(inf.data)
write.csv(inf.data, file="inf.2.data.csv")
d <- read_csv(file="inf.2.data.csv") %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
###
library(tidyverse)
library(knitr)
library(langcog)
library(ggthemes)
## importing data
d <- read_csv(file="inf.2.data.csv") %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
d %>%
group_by(trial_type) %>%
summarise(n = length(unique(id)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
ms <- d %>%
filter(trial_type == "test") %>%
group_by(id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ms <- d %>%
filter(trial_type == "test") %>%
group_by(subid) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
d
ms <- d %>%
filter(trial_type == "test") %>%
group_by(id)
d
inf.data <- inf.data%>%
mutate(targetObj = ifelse(target == "right",rightObject, leftObject),
correct2 = ifelse(pick == targetObj, 1, 0))
inf.data= melt(setDT(raw), measure = patterns( "^data.condition","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.control","^data.rt", "^data.correct"))
names(inf.data) = c("id","alltrial","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","control","rt","correct")
inf.data $pick= str_sub(inf.data $pick,80,str_length(inf.data $pick)-4)
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(id)]
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
inf.data <- inf.data%>%
mutate(targetObj = ifelse(target == "right",rightObject, leftObject),
correct = ifelse(pick == targetObj, 1, 0))
# check resulting datafile
str(inf.data)
head(inf.data)
# write csv file for further analysis
write.csv(inf.data, file="inf.2.data.csv")
ms <- d %>%
filter(trial_type == "test") %>%
group_by(id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ms <- d %>%
filter(trial_type == "test") %>%
group_by(id) %>%
summarise(correct = mean(correct))
ms <- d %>%
filter(trial_type == "test") %>%
group_by(id) %>%
summarise(correct = mean(correct))%>%
multi_boot_standard(col = "correct")
ms <- d %>%
filter(trial_type == "test") %>%
group_by(control,id) %>%
summarise(correct = mean(correct))%>%
multi_boot_standard(col = "correct")
ms
ggplot(ms,
aes(x = control, y = mean, fill = control)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Trial Type",
breaks=c("false", "true"),
labels=c("Test", "Control"))
p <- d %>%
filter(trial_type == "test") %>%
group_by(control, id) %>%
summarise(correct = mean(correct))
p1 <- p %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p, aes(x = control, y = correct, col = control, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p1, aes(x = control, y = mean, col = control, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Control",
breaks=c("false", "true"),
labels=c("No", "Yes"))
d %>%
group_by(trial_type) %>%
summarise(n = length(unique(id)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
ms <- d %>%
filter(trial_type == "test") %>%
group_by(targetOnTable, id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ggplot(ms,
aes(x = control, y = mean, fill = control,frame = targetOnTable)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
facet_wrap(~ targetOnTable) +
labs(x="",y="Proportion Expected Choice")+
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Trial Type",
breaks=c("false", "true"),
labels=c("Test", "Control"))
ggplot(ms,
aes(x = 1, y = mean, fill = control,frame = targetOnTable)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
facet_wrap(~ targetOnTable) +
labs(x="",y="Proportion Expected Choice")+
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Trial Type",
breaks=c("false", "true"),
labels=c("Test", "Control"))
ggplot(ms,
aes(x = targetOnTable, y = mean, fill = targetOnTable)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
facet_wrap(~ targetOnTable) +
labs(x="",y="Proportion Expected Choice")+
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Trial Type",
breaks=c("false", "true"),
labels=c("Test", "Control"))
ggplot(ms,
aes(x = targetOnTable, y = mean, fill = targetOnTable)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Trial Type",
breaks=c("false", "true"),
labels=c("Test", "Control"))
d %>%
filter(trial_type == "test") %>%
group_by(targetOnTable, id) %>%
summarise(correct = mean(correct),
n = length(correct))
d %>%
filter(trial_type == "test") %>%
group_by(targetOnTable) %>%
summarise(correct = mean(correct),
n = length(correct))
d %>%
filter(trial_type == "test") %>%
group_by(targetOnTable) %>%
summarise(mean = mean(correct),
n = length(correct))
ggplot(ms,
aes(x = targetOnTable, y = mean, fill = targetOnTable)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Trial Type",
breaks=c("false", "true"),
labels=c("Test", "Control"))
ms <- d %>%
filter(trial_type == "test") %>%
group_by(control, trial, id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ggplot(ms,
aes(x = trial, y = mean, col = control)) +
geom_line(aes(group= control)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
position = position_dodge(width = .1)) +
geom_hline(yintercept = 0.5, lty=2)+
theme_few() +
scale_colour_solarized()
d %>%
filter(trial_type == "test") %>%
group_by(agent,control) %>%
summarise(n = length(agent),
correct = mean(correct)) %>%
knitr::kable(digits = 2)
ms <- d %>%
filter(trial_type == "test") %>%
group_by(control, agent, id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ggplot(ms,
aes(x = agent, y = mean, col = control)) +
geom_line(aes(group= control)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
position = position_dodge(width = .1)) +
geom_hline(yintercept = 0.5, lty=2)+
theme_few() +
scale_colour_solarized()
d %>%
filter(trial_type == "test") %>%
group_by(control, id) %>%
summarise(correct = mean(correct)) %>%
summarise(correct = list(correct)) %>%
group_by(control) %>%
mutate(df= t.test(unlist(correct), mu = 0.5)$parameter,
t_value = t.test(unlist(correct), mu = 0.5)$statistic,
p_value = t.test(unlist(correct), mu = 0.5)$p.value) %>%
select(control,df,t_value,p_value) %>%
knitr::kable(digits = 2)
d %>%
filter(trial_type == "test") %>%
group_by(control, id) %>%
summarise(correct = mean(correct)) %>%
summarise(correct = list(correct)) %>%
group_by(control) %>%
mutate(df= t.test(unlist(correct), mu = 0.5)$parameter,
t_value = t.test(unlist(correct), mu = 0.5)$statistic,
p_value = t.test(unlist(correct), mu = 0.5)$p.value) %>%
select(control,df,t_value,p_value) %>%
knitr::kable(digits = 3)
data_inf <- d%>%
filter(trial_type == "test")%>%
mutate(trial = scale(as.numeric(trial), center = TRUE, scale=FALSE))
lm <- glmer(correct ~ 1 +
(1 |id) + (1 |agent),
data = data_inf, family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summary(lm)
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_novel_data/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
novel.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.altAgent","^data.leftFruit","^data.rightFruit","^data.pick","^data.novel","^data.trial","^data.speakerChange","^data.rt", "^data.correct"))
names(novel.data) = c("test_date","alltrial","subid","age","condition","agent","altAgent","leftObject","rightObject","pick","target","trial","change","rt","correct")
novel.data$pick= str_sub(novel.data$pick,115,str_length(novel.data$pick)-4)
novel.data = novel.data[!duplicated(novel.data), ]
novel.data = novel.data[order(subid)]
# calculating age
novel.data $test_date = as.Date(str_sub(novel.data $test_date,44,str_length(novel.data $test_date)-11))
# change subid for subjects so that they match the subject log file
# also chnage age group for one child to match dob
novel.data <- novel.data%>%
mutate(targetObj = ifelse(target == "left",leftObject, rightObject),
subid = ifelse(subid == "180725_9_inf","180725_9_nov", subid),
correct = ifelse(pick == targetObj, 1, 0))
# load subject log file
log <- read_excel("../../MCC-subject_log.xlsx", 1)%>%
filter(Condition == "nov")%>%
select(subid,experimenter,keep_drop,sex,dob)
# koin datasets
novel.data <- left_join(novel.data,log, by = "subid")
# calcualte numerical age at test
novel.data <- novel.data %>%
filter(keep_drop == "keep")%>%
mutate(dob = as.numeric(dob),
dob = as.Date(dob,origin = "1899-12-30"),
age_num = lubridate::time_length(difftime(test_date,dob), "years"),
check_age = ifelse(substr(age_num,1,1) == age, T, F))
library(rjson)
library(tidyr)
library(stringr)
library(dplyr)
library(data.table)
library(readxl)
library(lubridate)
files <- dir("~/Work/MCC/git-mcc/kids_novel_data")
#combine files into one dataframe
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_novel_data/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(test_date= jf,
data = jd$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
novel.data= melt(setDT(raw), measure = patterns( "^data.subid","^data.subage","^data.condition","^data.agent","^data.altAgent","^data.leftFruit","^data.rightFruit","^data.pick","^data.novel","^data.trial","^data.speakerChange","^data.rt", "^data.correct"))
names(novel.data) = c("test_date","alltrial","subid","age","condition","agent","altAgent","leftObject","rightObject","pick","target","trial","change","rt","correct")
novel.data$pick= str_sub(novel.data$pick,115,str_length(novel.data$pick)-4)
novel.data = novel.data[!duplicated(novel.data), ]
novel.data = novel.data[order(subid)]
# calculating age
novel.data $test_date = as.Date(str_sub(novel.data $test_date,44,str_length(novel.data $test_date)-11))
# change subid for subjects so that they match the subject log file
# also chnage age group for one child to match dob
novel.data <- novel.data%>%
mutate(targetObj = ifelse(target == "left",leftObject, rightObject),
subid = ifelse(subid == "180725_9_inf","180725_9_nov", subid),
correct = ifelse(pick == targetObj, 1, 0))
# load subject log file
log <- read_excel("../../MCC-subject_log.xlsx", 1)%>%
filter(Condition == "nov")%>%
select(subid,experimenter,keep_drop,sex,dob)
# koin datasets
novel.data <- left_join(novel.data,log, by = "subid")
# calcualte numerical age at test
novel.data <- novel.data %>%
filter(keep_drop == "keep")%>%
mutate(dob = as.numeric(dob),
dob = as.Date(dob,origin = "1899-12-30"),
age_num = lubridate::time_length(difftime(test_date,dob), "years"),
check_age = ifelse(substr(age_num,1,1) == age, T, F))
novel.data <- novel.data %>%
select(-dob,-test_date,-check_age,-keep_drop,-experimenter,-sex)
write.csv(novel.data, file="kids_novel.data.csv")
d<- read_csv(file="kids_novel.data.csv")%>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE)
###
library(tidyverse)
library(knitr)
library(langcog)
library(ggthemes)
## importing data
d<- read_csv(file="kids_novel.data.csv")%>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
# check if someone needs to be excluded because wrong in training
# no one
d %>%
filter(trial_type == "train") %>%
group_by(subid)%>%
summarise(correct = mean(correct)) %>%
filter(correct == 0)
d %>%
group_by(trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 2)
d %>%
group_by(age)%>%
summarise(n = length(unique(subid)),
age_num = mean(age_num))%>%
knitr::kable(digits = 2)
p3 <- d %>%
filter(trial_type == "test") %>%
group_by(change, subid) %>%
summarise(correct = mean(correct))
p4 <- p3 %>%
multi_boot_standard(col = "correct")
p4 <- p3 %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p3, aes(x = change, y = correct, col = change, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p4, aes(x = change, y = mean, col = change, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Speaker Change",
breaks=c("false", "true"),
labels=c("No", "Yes"))
p1 <- d %>%
filter(trial_type == "test") %>%
group_by(change,age, subid) %>%
summarise(correct = mean(correct))
p2 <- p1 %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p1, aes(x = change, y = correct, col = change, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p2, aes(x = change, y = mean, col = change, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
facet_wrap(~age)+
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Speaker Change",
breaks=c("false", "true"),
labels=c("No", "Yes"))
p5 <- d %>%
filter(trial_type == "test") %>%
group_by(change,age_num, subid) %>%
summarise(correct = mean(correct))
ggplot(data = p5, aes(x = age_num, y = correct, col = change)) +
geom_smooth(method = "loess", se = T)+
geom_jitter( alpha = .5, height = 0.04)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
#theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Speaker Change",
breaks=c("false", "true"),
labels=c("No", "Yes"))
d %>%
filter(trial_type == "test") %>%
group_by(change, subid) %>%
summarise(correct = mean(correct)) %>%
summarise(correct = list(correct)) %>%
group_by(change) %>%
mutate(df= t.test(unlist(correct), mu = 0.5)$parameter,
t_value = t.test(unlist(correct), mu = 0.5)$statistic,
p_value = t.test(unlist(correct), mu = 0.5)$p.value) %>%
select(change,df,t_value,p_value) %>%
knitr::kable(digits = 3)
lm_data <- d%>%
filter(trial_type == "test")%>%
mutate(choiceAgent = ifelse( change == "false", agent, altAgent),
age_num = scale(age_num, center = TRUE, scale = TRUE))
lm <- glmer(correct ~ age_num * change + (change | subid) + (age_num * change | choiceAgent),
data = lm_data, family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
library(lme4)
lm_data <- d%>%
filter(trial_type == "test")%>%
mutate(choiceAgent = ifelse( change == "false", agent, altAgent),
age_num = scale(age_num, center = TRUE, scale = TRUE))
lm <- glmer(correct ~ age_num * change + (change | subid) + (age_num * change | choiceAgent),
data = lm_data, family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summary(lm)
