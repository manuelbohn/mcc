geom_hline(yintercept = 0, lty=2)+
ylim(-3,3)+
guides(alpha = F)
child_model_param
ex3_data
child_ex3_data
ex3_model_data <- child_ex3_data%>%
mutate(pref_int_different_speaker = child_model_param$pref_int_different_speaker,
pref_slope_different_speaker = child_model_param$pref_slope_different_speaker,
pref_int_same_speaker = child_model_param$pref_int_same_speaker,
pref_slope_same_speaker = child_model_param$pref_slope_same_speaker,
so = so_int+so_slope*(age_num-min(age_num)),
so_int = child_model_param$so_int,
so_slope = child_model_param$so_slope,
diff_prior = plogis(pref_int_different_speaker+pref_slope_different_speaker*(age_num-min(age_num))),
same_prior = plogis(pref_int_same_speaker+pref_slope_same_speaker*(age_num-min(age_num))))%>%
group_by(subid,trial)%>%
mutate(priorProbs = ifelse(Speaker == "same_speaker" & Alignment == "congruent", list(c(1-same_prior,1-same_prior,same_prior)),
ifelse(Speaker == "different_speaker" & Alignment == "congruent", list(c(1-diff_prior,1-diff_prior,diff_prior)),
ifelse(Speaker == "same_speaker" & Alignment == "incongruent", list(c(same_prior,same_prior,1-same_prior)),
list(c(diff_prior,diff_prior,1-diff_prior))
))))%>%
ungroup()%>%
select(speaker,age_num,min_age,alignment,so,priorProbs,correct_inf)
child_model_param
child_model_param$so_int
child_model_param$so_slope
ex3_model_data <- child_ex3_data%>%
mutate(so_int = child_model_param$so_int,
so_slope = child_model_param$so_slope,
pref_int_different_speaker = child_model_param$pref_int_different_speaker,
pref_slope_different_speaker = child_model_param$pref_slope_different_speaker,
pref_int_same_speaker = child_model_param$pref_int_same_speaker,
pref_slope_same_speaker = child_model_param$pref_slope_same_speaker,
so = so_int+so_slope*(age_num-min(age_num)),
diff_prior = plogis(pref_int_different_speaker+pref_slope_different_speaker*(age_num-min(age_num))),
same_prior = plogis(pref_int_same_speaker+pref_slope_same_speaker*(age_num-min(age_num))))%>%
group_by(subid,trial)%>%
mutate(priorProbs = ifelse(Speaker == "same_speaker" & Alignment == "congruent", list(c(1-same_prior,1-same_prior,same_prior)),
ifelse(Speaker == "different_speaker" & Alignment == "congruent", list(c(1-diff_prior,1-diff_prior,diff_prior)),
ifelse(Speaker == "same_speaker" & Alignment == "incongruent", list(c(same_prior,same_prior,1-same_prior)),
list(c(diff_prior,diff_prior,1-diff_prior))
))))%>%
ungroup()%>%
select(speaker,age_num,min_age,alignment,so,priorProbs,correct_inf)
ex3_model_data <- child_ex3_data%>%
mutate(so_int = child_model_param$so_int,
so_slope = child_model_param$so_slope,
pref_int_different_speaker = child_model_param$pref_int_different_speaker,
pref_slope_different_speaker = child_model_param$pref_slope_different_speaker,
pref_int_same_speaker = child_model_param$pref_int_same_speaker,
pref_slope_same_speaker = child_model_param$pref_slope_same_speaker,
so = so_int+so_slope*(age_num-min(age_num)),
diff_prior = plogis(pref_int_different_speaker+pref_slope_different_speaker*(age_num-min(age_num))),
same_prior = plogis(pref_int_same_speaker+pref_slope_same_speaker*(age_num-min(age_num))))%>%
group_by(id,trial)%>%
mutate(priorProbs = ifelse(Speaker == "same_speaker" & Alignment == "congruent", list(c(1-same_prior,1-same_prior,same_prior)),
ifelse(Speaker == "different_speaker" & Alignment == "congruent", list(c(1-diff_prior,1-diff_prior,diff_prior)),
ifelse(Speaker == "same_speaker" & Alignment == "incongruent", list(c(same_prior,same_prior,1-same_prior)),
list(c(diff_prior,diff_prior,1-diff_prior))
))))%>%
ungroup()%>%
select(speaker,age_num,min_age,alignment,so,priorProbs,correct_inf)
ex3_model_data <- child_ex3_data%>%
mutate(so_int = child_model_param$so_int,
so_slope = child_model_param$so_slope,
pref_int_different_speaker = child_model_param$pref_int_different_speaker,
pref_slope_different_speaker = child_model_param$pref_slope_different_speaker,
pref_int_same_speaker = child_model_param$pref_int_same_speaker,
pref_slope_same_speaker = child_model_param$pref_slope_same_speaker,
so = so_int+so_slope*(age_num-min(age_num)),
diff_prior = plogis(pref_int_different_speaker+pref_slope_different_speaker*(age_num-min(age_num))),
same_prior = plogis(pref_int_same_speaker+pref_slope_same_speaker*(age_num-min(age_num))))%>%
group_by(id,trial)%>%
mutate(priorProbs = ifelse(speaker == "same_speaker" & alignment == "congruent", list(c(1-same_prior,1-same_prior,same_prior)),
ifelse(speaker == "different_speaker" & alignment == "congruent", list(c(1-diff_prior,1-diff_prior,diff_prior)),
ifelse(speaker == "same_speaker" & alignment == "incongruent", list(c(same_prior,same_prior,1-same_prior)),
list(c(diff_prior,diff_prior,1-diff_prior))
))))%>%
ungroup()%>%
select(speaker,age_num,min_age,alignment,so,priorProbs,correct_inf)
ex3_model_data <- child_ex3_data%>%
mutate(so_int = child_model_param$so_int,
so_slope = child_model_param$so_slope,
pref_int_different_speaker = child_model_param$pref_int_different_speaker,
pref_slope_different_speaker = child_model_param$pref_slope_different_speaker,
pref_int_same_speaker = child_model_param$pref_int_same_speaker,
pref_slope_same_speaker = child_model_param$pref_slope_same_speaker,
so = so_int+so_slope*(age_num-min(age_num)),
diff_prior = plogis(pref_int_different_speaker+pref_slope_different_speaker*(age_num-min(age_num))),
same_prior = plogis(pref_int_same_speaker+pref_slope_same_speaker*(age_num-min(age_num))))%>%
group_by(id,trial)%>%
mutate(priorProbs = ifelse(speaker == "same_speaker" & alignment == "congruent", list(c(1-same_prior,1-same_prior,same_prior)),
ifelse(speaker == "different_speaker" & alignment == "congruent", list(c(1-diff_prior,1-diff_prior,diff_prior)),
ifelse(speaker == "same_speaker" & alignment == "incongruent", list(c(same_prior,same_prior,1-same_prior)),
list(c(diff_prior,diff_prior,1-diff_prior))
))))%>%
ungroup()%>%
select(speaker,age_num,minage,alignment,so,priorProbs,correct_inf)
ex3_model_data
child.ex3.rsa.model.predictions <-'
var allData = dataFromR.ex3data
var model = function(){
var noise = uniformDrift({a: 0, b: 1, width: 0.1})
var output = map(function(row){
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, row.priorProbs,row.so)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
return  [row.age_num + "/" + row.Speaker + "/" + row.Alignment, Math.exp(noisyModelPredictions.score(1))]
}, allData)
return extend(_.fromPairs(output), {noise: noise})
}
'
child_ex3_pragm_model<- webppl(
program_code = paste(rsaUtils, childModelParam, child.ex3.rsa.predictions , sep='\n'),
data =list(ex3data = ex3_model_data),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2, burn = 1, verbose = T)
)%>%
saveRDS("../../stats/saves/child_ex3_pragm_model.rds")
child.ex3.rsa.predictions <-'
var allData = dataFromR.ex3data
var model = function(){
var noise = uniformDrift({a: 0, b: 1, width: 0.1})
var output = map(function(row){
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, row.priorProbs,row.so)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
return  [row.age_num + "/" + row.Speaker + "/" + row.Alignment, Math.exp(noisyModelPredictions.score(1))]
}, allData)
return extend(_.fromPairs(output), {noise: noise})
}
'
child_ex3_pragm_model<- webppl(
program_code = paste(rsaUtils, childModelParam, child.ex3.rsa.predictions , sep='\n'),
data =list(ex3data = ex3_model_data),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2, burn = 1, verbose = T)
)%>%
saveRDS("../../stats/saves/child_ex3_pragm_model.rds")
child_ex3_pragm_model<- webppl(
program_code = paste(rsaUtils, childRsaModel, child.ex3.rsa.predictions , sep='\n'),
data =list(ex3data = ex3_model_data),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2, burn = 1, verbose = T)
)%>%
saveRDS("../../stats/saves/child_ex3_pragm_model.rds")
child_ex3_pragm_model <- readRDS("../../stats/saves/child_ex3_pragm_model.rds")
child_ex3_pragm_model
child_ex3_pragm_model
child.ex3.rsa.predictions <-'
var allData = dataFromR.ex3data
var model = function(){
var noise = uniformDrift({a: 0, b: 1, width: 0.1})
var output = map(function(row){
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, row.priorProbs,row.so)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
return  [row.age_num + "/" + row.speaker + "/" + row.alignment, Math.exp(noisyModelPredictions.score(1))]
}, allData)
return extend(_.fromPairs(output), {noise: noise})
}
'
child_ex3_pragm_model<- webppl(
program_code = paste(rsaUtils, childRsaModel, child.ex3.rsa.predictions , sep='\n'),
data =list(ex3data = ex3_model_data),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2, burn = 1, verbose = T)
)%>%
saveRDS("../../stats/saves/child_ex3_pragm_model.rds")
child_ex3_pragm_model <- readRDS("../../stats/saves/child_ex3_pragm_model.rds")%>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("age","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic")
child_ex3_pragm_model <- readRDS("../../stats/saves/child_ex3_pragm_model.rds")%>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("age","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic")
child_ex3_pragm_model
child_ex3_pragm_model_noise <- child_ex3_pragm_model %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
child_ex3_pragm_model <- readRDS("../../stats/saves/child_ex3_pragm_model.rds")
child_ex3_pragm_model_predictions <- child_ex3_pragm_model%>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("age","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic")
child_ex3_pragm_model_noise <- child_ex3_pragm_model %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
child_ex3_pragm_model_noise
child_ex3_pragm_model<- webppl(
program_code = paste(rsaUtils, childRsaModel, child.ex3.rsa.predictions , sep='\n'),
data =list(ex3data = ex3_model_data),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 500, verbose = T)
)%>%
saveRDS("../../stats/saves/child_ex3_pragm_model.rds")
child_ex3_pragm_model <- readRDS("../../stats/saves/child_ex3_pragm_model.rds")
child_ex3_pragm_model_noise <- child_ex3_pragm_model %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
child_ex3_pragm_model_noise
child_ex3_pragm_model_predictions
child_ex3_pragm_model_predictions <- child_ex3_pragm_model%>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("age","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic")%>%
group_by(age,speaker,alignment)%>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
child_ex3_pragm_model_predictions
child_model_predictions <- bind_rows(
child_ex3_pragm_model_predictions
)
child_ex3_data
plot_child_ex3_data <- child_ex3_data%>%
group_by(age_num,speaker,alignment)%>%
summarise(mean = mean(correct_inf))
ggplot(child_modelpredictions)+
geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper, fill = model), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(Speaker~Alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
child_model_predictions <- bind_rows(
child_ex3_pragm_model_predictions
)
plot_child_ex3_data <- child_ex3_data%>%
group_by(age_num,speaker,alignment)%>%
summarise(mean = mean(correct_inf))
ggplot(child_model_predictions)+
geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper, fill = model), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(Speaker~Alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
ggplot(child_model_predictions)+
geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(Speaker~Alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
child_model_predictions
child_ex3_pragm_model_predictions <- child_ex3_pragm_model%>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("age","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic")%>%
group_by(model,age,speaker,alignment)%>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
child_model_predictions <- bind_rows(
child_ex3_pragm_model_predictions
)
ggplot(child_model_predictions)+
geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper, fill = model), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(Speaker~Alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
child_ex3_pragm_model_predictions
ggplot(child_model_predictions)+
geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper, fill = model), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(Speaker~Alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
ggplot(child_model_predictions)+
geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper, fill = model), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(speaker~alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
plot_child_ex3_data
ggplot(child_model_predictions)+
geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)
ggplot(child_model_predictions)+
geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper, fill = model), alpha = .4)
child_model_predictions
ggplot(child_model_predictions)+
geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper), alpha = .4)
ggplot(child_model_predictions)+
#geom_jitter(data = p_data, aes(x = age_bin, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper), alpha = .4)
plot_child_ex3_data
ggplot(child_model_predictions)+
geom_jitter(data = plot_child_ex3_data, aes(x = age_num, y = correct_inf), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(speaker~alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
ggplot(child_model_predictions)+
geom_jitter(data = plot_child_ex3_data, aes(x = age_num, y = mean), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(speaker~alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
ggplot(child_model_predictions)+
geom_jitter(data = plot_child_ex3_data, aes(x = age_num, y = mean), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper), alpha = .4)
child_model_predictions
child_ex3_pragm_model_predictions <- child_ex3_pragm_model%>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("age","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic")%>%
group_by(model,age,speaker,alignment)%>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))%>%
ungroup()%>%
mutate(age = as.numeric(age))
child_model_predictions <- bind_rows(
child_ex3_pragm_model_predictions
)
plot_child_ex3_data <- child_ex3_data%>%
group_by(age_num,speaker,alignment)%>%
summarise(mean = mean(correct_inf))
ggplot(child_model_predictions)+
geom_jitter(data = plot_child_ex3_data, aes(x = age_num, y = mean), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
#geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(speaker~alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
ggplot(child_model_predictions)+
geom_jitter(data = plot_child_ex3_data, aes(x = age_num, y = mean), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = plot_child_ex3_data, aes(x = age_num, y = mean), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(speaker~alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
ggplot(child_model_predictions)+
geom_jitter(data = plot_child_ex3_data, aes(x = age_num, y = mean), width = .025,height = .025, alpha = .2)+
geom_ribbon(aes(x = age, ymin = ci_lower, ymax = ci_upper), alpha = .4) +
geom_line(aes(x = age, y = mean, col = model), size = 1, alpha = 1, linetype = 1) +
geom_smooth(data = child_ex3_data, aes(x = age_num, y = correct_inf), col = "black", size = 0.6, method = "glm", method.args = list(family = "binomial"),  se = T,  alpha = .5, size = .4)+
geom_hline(yintercept = 0.5, lty=2)+
labs(y="proportion more informative")+
ylim(-0.05,1.05)+
facet_grid(speaker~alignment)+
theme_few()+
scale_color_solarized()+
scale_fill_solarized()
child_ex3_pragm_model_noise <- child_ex3_pragm_model %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
child_ex3_pragm_model_noise
ex3_data_param <- ex3_data%>%
mutate(different_speaker_pref_int = model_params$different_speaker_pref_int,
different_speaker_pref_slope = model_params$different_speaker_pref_slope,
so_int = model_params$NA_so_int,
so_slope = model_params$NA_so_slope,
same_speaker_pref_int = model_params$same_speaker_pref_int,
same_speaker_pref_slope = model_params$same_speaker_pref_slope,
so = so_int+so_slope*(age_num-min(age_num)),
diff_prior = plogis(different_speaker_pref_int+different_speaker_pref_slope*(age_num-min(age_num))),
same_prior = plogis(same_speaker_pref_int+same_speaker_pref_slope*(age_num-min(age_num))))%>%
group_by(subid,trial)%>%
mutate(priorProbs = ifelse(Speaker == "same_speaker" & Alignment == "congruent", list(c(1-same_prior,1-same_prior,same_prior)),
ifelse(Speaker == "different_speaker" & Alignment == "congruent", list(c(1-diff_prior,1-diff_prior,diff_prior)),
ifelse(Speaker == "same_speaker" & Alignment == "incongruent", list(c(same_prior,same_prior,1-same_prior)),
list(c(diff_prior,diff_prior,1-diff_prior))
))))%>%
ungroup()%>%
mutate(min_age = min(age_num))%>%
select(Speaker,age_num,min_age,Alignment,so,priorProbs,correct_inf)
developmentalNoisyModelPred <-'
var allData = dataFromR.ex3data
var model = function(){
var noise_slope = uniformDrift({a: -2, b: 2, width: 0.4})
var noise_int = uniformDrift({a: -2, b: 2, width: 0.4})
var output = map(function(row){
var noise = logistic(noise_int + noise_slope * (row.age_num-row.min_age))
//display(JSON.stringify(noise))
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, row.priorProbs,row.so)
var noisyModelPredictions = addNoise(modelPredictions, noise)
observe(noisyModelPredictions, row.correct_inf)
return  [row.age_num + "/" + row.Speaker + "/" + row.Alignment, Math.exp(noisyModelPredictions.score(1))]
}, allData)
return extend(_.fromPairs(output), {noise_int: noise_int, noise_slope: noise_slope})
}
'
dev_noisy_model_pred<- webppl(
program_code = paste(rsaUtils, rsaModel, developmentalNoisyModelPred , sep='\n'),
data =list(ex3data = ex3_data_param),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 200, burn = 50, verbose = T)
)
kill_webppl()
kill_webppl()
kill_webppl()
kill_webppl()
kill_webppl()
kill_webppl()
kill_webppl()
child_ex3_pragm_model_noise <- child_ex3_pragm_model %>%
filter(Parameter %in% c("noise"))
ggplot(child_ex3_pragm_model_noise, aes(x = value))+
geom_histogram()+
facet_wrap(~Parameter, scales = 'free')
noisy_model_pred<- webppl(
program_code = paste(rsaUtils, rsaModel, noisyModelPredWebppl , sep='\n'),
data =list(ex3data = ex3_data_param),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 500, verbose = T)
)
)kill_webppl()
kill_webppl()
kill_webppl()
kill_webppl()
dev_noisy_model_pred<- webppl(
program_code = paste(rsaUtils, rsaModel, developmentalNoisyModelPred , sep='\n'),
data =list(ex3data = ex3_data_param),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 50, burn = 10, verbose = T)
)
kill_webppl()
kill_webppl()
