foreach_(0);
};
var logistic = function(x) {1 / (1 + Math.exp(-x))}
var levels = function(df, label){
return _.uniq(_.map(df, label));
}
'
rsaModel <- '
var literalListener = cache(function(utterance, priorProbs){
Infer({method: "enumerate", model: function(){
var lexiconName = sample(LexiconPrior);
var lexicon = lexiconObject[lexiconName];
var obj = sample( Categorical({vs: all_objects, ps: priorProbs}));
if ("label" in utterance) {
var truthValue = lexicon(utterance, obj);
condition(truthValue)
}
if (utterance.point) {
var truthValuePoint = point(utterance, obj);
condition(truthValuePoint)
}
return obj.shape
}})
})
var speaker = cache(function(obj, lexiconName, priorProbs, speakerOptimality){
Infer({method: "enumerate", model: function(){
var utterance = utterancePrior(obj, lexiconName);
var L0 = literalListener(utterance, priorProbs);
factor(speakerOptimality * L0.score(obj.shape))
return utterance
}})
})
var pragmaticListener = cache(function(utterance, priorProbs, speakerOptimality){
Infer({method: "enumerate", model: function(){
var lexiconName = sample(LexiconPrior);
var obj = sample( Categorical({vs: all_objects, ps: priorProbs}));
var S1 = speaker(obj, lexiconName, priorProbs, speakerOptimality);
observe(S1, utterance)
return obj.shape == "circle" ? 1 : 0
}})
})
var addNoise = function(dist, noiseParam){
Infer({model: function(){
return flip(noiseParam) ? uniformDraw([0, 1]) : sample(dist)
}
})
}
'
# load data from experiment 3
adult_ex3_data <-read_csv(file="../../stats/data/adult_ex3.csv")
# adults exp 1
adult_ex1_data <- read_csv(file="../../stats/data/adult_ex1.csv")
# load data from prior manipulation experiments to set priors
adult_ex2_novelty_data <- read_csv(file="../../stats/data/adult_ex2_novelty.csv")
adult_ex2_preference_data <- read_csv(file="../../stats/data/adult_ex2_preference.csv")
# adult_model_param<- webppl(
#   program_code = paste(rsaUtils, rsaModel, speakOptParam , sep='\n'),
#   data = list(data = adult_ex1_data %>% filter(condition == "test")),
#   data_var = "dataFromR",
#   model_var = "model",
#   chains = 4,
#   cores = 4,
#   inference_opts = list(method = "MCMC", samples = 6000, burn = 2000, verbose = T)
# )%>%
#   saveRDS("../../stats/saves/adult_model_param.rds")
adult_model_param <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value) %>%
summarise(so_map = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
# visualize speaker optimality parameter
plot_adult_model_speak_opt <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value)
ggplot(plot_adult_model_speak_opt, aes(value))+
geom_density()+
xlab("Speaker optimality")+
theme_few()
# create datafiles with model parameters
model_params_ex3 <- expand.grid(
common_ground_manipulation = c("preference", "novelty"),
speaker = c("same_speaker", "different_speaker"),
speak_opt = adult_model_param$so_map
)
prior_pref_summary <- bind_rows(
adult_ex2_preference_data,
adult_ex2_novelty_data) %>%
group_by(condition, experiment) %>%
summarise(prior = mean(correct)) %>%
mutate(experiment = gsub("adult_ex2_", "", experiment)) %>%
rename(common_ground_manipulation = experiment,
speaker = condition)
model_params_ex3 <- left_join(
model_params_ex3,
prior_pref_summary, by = c("common_ground_manipulation", "speaker")
) %>%
rename(congruent = prior) %>%
mutate(incongruent = 1 - congruent) %>%
gather(alignment, prior, congruent, incongruent)
predictions.rsa.ex3.noise <-'
var allParams = dataFromR.allConditions
var allData = dataFromR.allData
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var conditionOutput = map(function(conditionInfo){
var conditionSpecificData =  _.filter(allData, {common_ground_manipulation: conditionInfo.common_ground_manipulation, speaker: conditionInfo.speaker, alignment: conditionInfo.alignment})
var conditionSpecificPriors = [1 - conditionInfo.prior, 1 - conditionInfo.prior, conditionInfo.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, conditionSpecificPriors, row.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
map(function(d){
observe(noisyModelPredictions, d.correct_inf)
}, conditionSpecificData)
return  [conditionInfo.common_ground_manipulation + "/" + conditionInfo.speaker + "/" +  conditionInfo.alignment, Math.exp(noisyModelPredictions.score(1))]
}, allConditions)
return extend(_.fromPairs(conditionOutput), {noise: noise})
}
'
predictions.rsa.ex3.noise <-'
var allParams = dataFromR.allConditions
var allData = dataFromR.allData
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var conditionOutput = map(function(conditionInfo){
var conditionSpecificData =  _.filter(allData, {common_ground_manipulation: conditionInfo.common_ground_manipulation, speaker: conditionInfo.speaker, alignment: conditionInfo.alignment})
var conditionSpecificPriors = [1 - conditionInfo.prior, 1 - conditionInfo.prior, conditionInfo.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, conditionSpecificPriors, row.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
map(function(d){
observe(noisyModelPredictions, d.correct_inf)
}, conditionSpecificData)
return  [conditionInfo.common_ground_manipulation + "/" + conditionInfo.speaker + "/" +  conditionInfo.alignment, Math.exp(noisyModelPredictions.score(1))]
}, allConditions)
return extend(_.fromPairs(conditionOutput), {noise: noise})
}
'
predictions.rsa.ex3.noise <-'
var allParams = dataFromR.allConditions
var allData = dataFromR.allData
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var conditionOutput = map(function(conditionInfo){
var conditionSpecificData =  _.filter(allData, {common_ground_manipulation: conditionInfo.common_ground_manipulation, speaker: conditionInfo.speaker, alignment: conditionInfo.alignment})
var conditionSpecificPriors = [1 - conditionInfo.prior, 1 - conditionInfo.prior, conditionInfo.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, conditionSpecificPriors, row.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
map(function(d){
observe(noisyModelPredictions, d.correct_inf)
}, conditionSpecificData)
return  [conditionInfo.common_ground_manipulation + "/" + conditionInfo.speaker + "/" +  conditionInfo.alignment, Math.exp(noisyModelPredictions.score(1))]
}, allParams)
return extend(_.fromPairs(conditionOutput), {noise: noise})
}
'
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data = list(allData = adult_ex3_data, allParams = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 20, burn = 5, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
predictions.rsa.ex3.noise <-'
var allParams = dataFromR.allParams
var allData = dataFromR.allData
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var conditionOutput = map(function(conditionInfo){
var conditionSpecificData =  _.filter(allData, {common_ground_manipulation: conditionInfo.common_ground_manipulation, speaker: conditionInfo.speaker, alignment: conditionInfo.alignment})
var conditionSpecificPriors = [1 - conditionInfo.prior, 1 - conditionInfo.prior, conditionInfo.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, conditionSpecificPriors, row.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
map(function(d){
observe(noisyModelPredictions, d.correct_inf)
}, conditionSpecificData)
return  [conditionInfo.common_ground_manipulation + "/" + conditionInfo.speaker + "/" +  conditionInfo.alignment, Math.exp(noisyModelPredictions.score(1))]
}, allParams)
return extend(_.fromPairs(conditionOutput), {noise: noise})
}
'
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data = list(allData = adult_ex3_data, allParams = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 20, burn = 5, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
predictions.rsa.ex3.noise <-'
var allParams = dataFromR.allParams
var allData = dataFromR.allData
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var conditionOutput = map(function(conditionInfo){
var conditionSpecificData =  _.filter(allData, {common_ground_manipulation: conditionInfo.common_ground_manipulation, speaker: conditionInfo.speaker, alignment: conditionInfo.alignment})
var conditionSpecificPriors = [1 - conditionInfo.prior, 1 - conditionInfo.prior, conditionInfo.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, conditionSpecificPriors, conditionInfo.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
map(function(d){
observe(noisyModelPredictions, d.correct_inf)
}, conditionSpecificData)
return  [conditionInfo.common_ground_manipulation + "/" + conditionInfo.speaker + "/" +  conditionInfo.alignment, Math.exp(noisyModelPredictions.score(1))]
}, allParams)
return extend(_.fromPairs(conditionOutput), {noise: noise})
}
'
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data = list(allData = adult_ex3_data, allParams = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 20, burn = 5, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
## noise parameter
ex3_pragm_model_noise <- readRDS("../../stats/saves/ex3_pragm_model_noise.rds") %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
ex3_pragm_model_noise
# model predictions
ex3_pragm_model_pred_noise <- readRDS("../../stats/saves/ex3_pragm_model_noise.rds") %>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("common_ground_manipulation","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic")
ex3_pragm_model_pred_noise
ex3_pragm_model<- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3 , sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR"
)
predictions.rsa.ex3 <-'
var allData = dataFromR.data
var output = map(function(row){
var priorProbLst = [1 - row.prior, 1 - row.prior, row.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, priorProbLst, row.speak_opt)
return extend([row.common_ground_manipulation + "/" + row.speaker + "/" + row.alignment, Math.exp(modelPredictions.score(1))])
}, allData)
output
'
ex3_pragm_model<- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3 , sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR"
)
# model predictions
ex3_pragm_model_predictions <- ex3_pragm_model %>%
separate(`0`, into = c("common_ground_manipulation", "speaker", "alignment"), sep="/")%>%
mutate(value = `1`,
model="pragmatic")%>%
select(-`1`)
ex3_pragm_model_predictions
# model predictions
ex3_pragm_model_pred_noise <- readRDS("../../stats/saves/ex3_pragm_model_noise.rds") %>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("common_ground_manipulation","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic")%>%
group_by(model,common_ground_manipulation,speaker,alignment)%>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
ex3_pragm_model_pred_noise
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data = list(allData = adult_ex3_data, allParams = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 1000, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
# model predictions
ex3_pragm_model_pred_noise <- readRDS("../../stats/saves/ex3_pragm_model_noise.rds") %>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("common_ground_manipulation","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic_noise")%>%
group_by(model,common_ground_manipulation,speaker,alignment)%>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
## noise parameter
ex3_pragm_model_noise <- readRDS("../../stats/saves/ex3_pragm_model_noise.rds") %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
ex3_pragm_model_noise
ex3_pragm_model_noise <- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3.noise, sep='\n'),
data = list(allData = adult_ex3_data, allParams = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 6000, burn = 2000, verbose = T)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise.rds")
# model predictions
ex3_pragm_model_pred_noise <- readRDS("../../stats/saves/ex3_pragm_model_noise.rds") %>%
filter(!(Parameter %in% c("noise")))  %>%
separate(Parameter, into = c("common_ground_manipulation","speaker", "alignment"), sep="/")%>%
mutate(model="pragmatic_noise")%>%
group_by(model,common_ground_manipulation,speaker,alignment)%>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
## noise parameter
ex3_pragm_model_noise <- readRDS("../../stats/saves/ex3_pragm_model_noise.rds") %>%
filter(Parameter %in% c("noise"))  %>%
summarise(mean = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
ex3_pragm_model_noise
# combine model predictions with data
# summarize data
adult_ex3_data_summary <- adult_ex3_data %>%
mutate(model = "data") %>%
group_by(model,common_ground_manipulation,speaker,alignment)%>%
summarize(k = sum(correct_inf), n = n())%>%
ungroup() %>%
mutate(a = 1 + k,
b = 1 + n - k,
ci_lower  = qbeta(.025, a, b),
ci_upper = qbeta(.975, a, b),
mean = (a-1)/(a+b-2))%>%
select(-a,-b,-n,-k)
# summarize model predictions
ex_3_model_pred <- bind_rows(
ex3_pragm_model_predictions
#ex3_prior_only_model_predictions,
#ex3_flat_prior_model_predictions
)%>%
group_by(model,common_ground_manipulation,speaker,alignment)%>%
summarise(mean = mean(value))%>%
mutate(ci_lower = mean,
ci_upper = mean)
# combine model predictions and data
ex_3_pred <- bind_rows(
ex_3_model_pred,
ex3_pragm_model_pred_noise,
adult_ex3_data_summary
)
#saveRDS(ex_3_pred, "../../stats/saves/adult_ex3_model_predictions_data.rds")
ggplot(data = ex_3_pred, aes(x = alignment, y = mean, col = model)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), size = .4,  position = position_dodge(width = .5), pch = 5)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Choosing More Informative")+
facet_grid (~ common_ground_manipulation + speaker) +
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
scale_color_manual(name="Model",
breaks=c("data","pragmatic","flat_prior","prior_only"),
values= c("black","#859900","#6c71c4","#b58900"))+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust = 1))
ex_3_cor_plot <- ex_3_pred %>%
ungroup()%>%
filter(model != "data") %>%
left_join(., ex_3_pred %>%
ungroup()%>%
filter(model == "data") %>%
rename(data_mean = mean, data_ci_lower = ci_lower, data_ci_upper = ci_upper) %>%
select(-model)
)
ggplot(data = ex_3_cor_plot,aes(x = mean, y = data_mean, col = "#BB5566")) +
geom_abline(intercept = 0, slope = 1, lty = 2, alpha = 0.7, size = 0.5)+
geom_point(size = 2)+
geom_errorbar(aes(ymin = data_ci_lower, ymax = data_ci_upper),width = 0,size = .7)+
geom_errorbarh(aes(xmin = ci_lower, xmax = ci_upper), height = 0,size = .7)+
coord_fixed()+
xlim(0,1)+ylim(0,1)+
xlab("Model")+
ylab("Data")+
guides(col = F)+
facet_grid ( ~ model) +
stat_cor(method = "pearson", label.x = 0.01, label.y = 0.99, aes(x = mean, y = data_mean), inherit.aes = F, size = 3)+
theme_few()
loglike.rsa.ex3.noise <-'
var allParams = dataFromR.allParams
var allData = dataFromR.allData
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var conditionOutput = map(function(conditionInfo){
var conditionSpecificData =  _.filter(allData, {common_ground_manipulation: conditionInfo.common_ground_manipulation, speaker: conditionInfo.speaker, alignment: conditionInfo.alignment})
var conditionSpecificPriors = [1 - conditionInfo.prior, 1 - conditionInfo.prior, conditionInfo.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, conditionSpecificPriors, conditionInfo.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
var loglike = Binomial({
p: Math.exp(noisyModelPredictions.score(1)),
n: conditionSpecificData.length}).score(
sum(_.map(conditionSpecificData, "correct_inf"))
)
return  loglike
}, allParams)
return sum(conditionOutput)
}
'
ex3_pragm_model_loglike <- webppl(
program_code = paste(rsaUtils, rsaModel, loglike.rsa.ex3.noise, sep='\n'),
data = list(allData = adult_ex3_data, allParams = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "forward", samples = 5000)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_loglike.rds")
kill_webppl()
kill_webppl()
kill_webppl()
kill_webppl()
kill_webppl()
loglike.rsa.ex3.noise <-'
var allParams = dataFromR.allParams
var allData = dataFromR.allData
var model = function(){
var noise = uniformDrift({a: 0, b:1, width: 0.1})
var conditionOutput = map(function(conditionInfo){
var conditionSpecificData =  _.filter(allData, {common_ground_manipulation: conditionInfo.common_ground_manipulation, speaker: conditionInfo.speaker, alignment: conditionInfo.alignment})
var conditionSpecificPriors = [1 - conditionInfo.prior, 1 - conditionInfo.prior, conditionInfo.prior]
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, conditionSpecificPriors, conditionInfo.speak_opt)
var noisyModelPredictions = addNoise(modelPredictions, noise)
var loglike = Binomial({
p: Math.exp(noisyModelPredictions.score(1)),
n: conditionSpecificData.length}).score(
sum(_.map(conditionSpecificData, "correct_inf"))
)
return  loglike
}, allParams)
return sum(conditionOutput)
}
'
ex3_pragm_model_noise_loglike <- webppl(
program_code = paste(rsaUtils, rsaModel, loglike.rsa.ex3.noise, sep='\n'),
data = list(allData = adult_ex3_data, allParams = model_params_ex3),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "forward", samples = 2)
) %>%
saveRDS("../../stats/saves/ex3_pragm_model_noise_loglike.rds")
ex3_pragm_model_noise_loglike <- readRDS("../../stats/saves/ex3_pragm_model_noise_loglike.rds")%>%
mutate(model = "pragmatic")%>%
group_by(model)%>%
summarize(logP = logSumExp(value))
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(knitr)
library(ggthemes)
library(langcog)
library(rwebppl)
library(coda)
library(ggpubr)
estimate_mode <- function(s) {
d <- density(s)
return(d$x[which.max(d$y)])
}
hdi_upper<- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","upper"])
}
hdi_lower<- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","lower"])
}
?logSumExp
library(tidyverse)
library(knitr)
library(ggthemes)
library(langcog)
library(rwebppl)
library(matrixStats)
library(coda)
library(ggpubr)
?logSumExp
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(knitr)
library(ggthemes)
library(langcog)
library(rwebppl)
library(coda)
library(matrixStats)
library(ggpubr)
estimate_mode <- function(s) {
d <- density(s)
return(d$x[which.max(d$y)])
}
hdi_upper<- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","upper"])
}
hdi_lower<- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","lower"])
}
ex3_pragm_model_noise_loglike <- readRDS("../../stats/saves/ex3_pragm_model_noise_loglike.rds")%>%
mutate(model = "pragmatic")%>%
group_by(model)%>%
summarize(logP = logSumExp(value))
ex3_pragm_model_noise_loglike
ex3_pragm_model_noise_loglike <- readRDS("../../stats/saves/ex3_pragm_model_noise_loglike.rds")%>%
mutate(model = "pragmatic")%>%
group_by(model)%>%
summarize(logP = logSumExp(value))
