var infData = _.filter(dataFromR, {experiment: "informativeness_pretest"})
// make finer grained as needed
var binned_age_range = _.range(0, 2, 0.05)
var all_conditions = levels(prefData, "condition")
var foreach = function(fn, lst) {
var foreach_ = function(i) {
if (i < lst.length) {
fn(lst[i]);
foreach_(i + 1);
}
};
foreach_(0);
};
var logistic = function(x) {1 / (1 + Math.exp(-x))}
var model  = function(){
var so_slope = uniformDrift({a: -2, b: 2, width: 0.4})
var so_int = uniformDrift({a: -2, b: 2, width: 0.4})
foreach(function(row){
var age = row.age_num
var speakerOptimality = so_int  + so_slope * (age - infData[0].minage)
var inf_priorProbs = [.5, .5, .5]
var rsaPredictions = pragmaticListener({label: "dax", point: 2 },
inf_priorProbs, speakerOptimality)
observe(rsaPredictions, row.correct)
}, infData)
var pref_params = map(function(cndtn){
var conditionData = _.filter(prefData, {condition: cndtn})
var pref_slope = uniformDrift({a: -2, b: 2, width: 0.4})
var pref_int = uniformDrift({a: -2, b: 2, width: 0.4})
foreach(function(row){
var age = row.age_num
var priorReg = logistic(pref_int + pref_slope * (age - row.minage))
var priorProbs= [1-priorReg, priorReg]
var priorPredictions = Infer({method: "enumerate", model: function(){
var obj = sample( Categorical({vs: prior_objects, ps: priorProbs}));
return obj.shape == "circle" ? 1 : 0
}})
observe(priorPredictions, row.correct)
}, conditionData)
return {pref_int, pref_slope, condition: cndtn}
}, all_conditions)
var diff_speaker_params = _.filter(pref_params,
{condition: "different_speaker"})[0]
var same_speaker_params = _.filter(pref_params,
{condition: "same_speaker"})[0]
var predictions_by_age = map(function(age_bin){
var speakerOptimality = so_int  + so_slope * age_bin
var diff_priorReg = logistic(diff_speaker_params.pref_int +
diff_speaker_params.pref_slope * age_bin)
var same_priorReg = logistic(same_speaker_params.pref_int +
same_speaker_params.pref_slope * age_bin)
return extend(
{
diff_priorReg,
same_priorReg,
speakerOptimality,
age_bin,
})
}, binned_age_range)
return predictions_by_age
}
'
params_by_age<- webppl(
program_code = paste(rsaUtils, rsaModel, paramModelWebppl , sep='\n'),
data = pre_data,
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 200, verbose = T)
)
## importing data
files <- dir("~/Work/MCC/git-mcc/kids_pref_data_2/")
saveRDS(model_pred, file = "../saves/params_by_age.rds")
params_by_age
saveRDS(params_by_age, file = "../saves/params_by_age.rds")
params_by_age
model_params_by_age <- params_by_age%>%
select(value) %>%
map_df(bind_rows)%>%
group_by(age_bin)%>%
summarise(so_map = estimate_mode(speakerOptimality),
diff_priorReg_map = estimate_mode(diff_priorReg),
same_priorReg_map = estimate_mode(same_priorReg))
model_params_by_age
modelPredWebppl <- '
var levels = function(df, label){
return _.uniq(_.map(df, label));
}
var ex3Data = dataFromR.ex3data
var modelParams = dataFromR.modelParams
//display(JSON.stringify(modelParams))
var foreach = function(fn, lst) {
var foreach_ = function(i) {
if (i < lst.length) {
fn(lst[i]);
foreach_(i + 1);
}
};
foreach_(0);
};
var logistic = function(x) {1 / (1 + Math.exp(-x))}
var predict_by_age = function(age_bin){
//display(JSON.stringify(age_bin))
var speakerOptimality = age_bin.so_map
var diff_priorReg = age_bin.diff_priorReg_map
var diff_priorProbs_congruent = [1-diff_priorReg, 1-diff_priorReg, diff_priorReg]
var diff_priorProbs_incongruent = [diff_priorReg, diff_priorReg, 1-diff_priorReg]
var rsaPredictions_diff_cong = expectation(pragmaticListener({label: "dax", point: 2 }, diff_priorProbs_congruent,   speakerOptimality))
var rsaPredictions_diff_incong = expectation(pragmaticListener({label: "dax", point: 2 }, diff_priorProbs_incongruent, speakerOptimality))
var same_priorReg =age_bin.same_priorReg_map
var same_priorProbs_congruent = [1-same_priorReg, 1-same_priorReg, same_priorReg]
var same_priorProbs_incongruent = [same_priorReg, same_priorReg, 1-same_priorReg]
var rsaPredictions_same_cong = expectation(pragmaticListener({label: "dax", point: 2 }, same_priorProbs_congruent, speakerOptimality))
var rsaPredictions_same_incong = expectation(pragmaticListener({label: "dax", point: 2 }, same_priorProbs_incongruent, speakerOptimality))
return extend(
{rsaPredictions_diff_cong,
rsaPredictions_diff_incong,
rsaPredictions_same_cong,
rsaPredictions_same_incong,
age_bin
})
}
var predictions_by_age = map(predict_by_age, modelParams)
predictions_by_age
'
model_pred<- webppl(
program_code = paste(rsaUtils, rsaModel, modelPredWebppl , sep='\n'),
data = list(ex3data = ex3_data, modelParams = model_params_by_age),
data_var = "dataFromR",
model_var = "predict_by_age",
chains = 1,
cores = 4,
inference_opts = list(method = "MCMC", samples = 10, burn = 1, verbose = T)
)
modelPredWebppl <- '
var levels = function(df, label){
return _.uniq(_.map(df, label));
}
var ex3Data = dataFromR.ex3data
var modelParams = dataFromR.modelParams
//display(JSON.stringify(modelParams))
var foreach = function(fn, lst) {
var foreach_ = function(i) {
if (i < lst.length) {
fn(lst[i]);
foreach_(i + 1);
}
};
foreach_(0);
};
var logistic = function(x) {1 / (1 + Math.exp(-x))}
var predict_by_age = function(age_bin){
display(JSON.stringify(age_bin))
var speakerOptimality = age_bin.so_map
var diff_priorReg = age_bin.diff_priorReg_map
var diff_priorProbs_congruent = [1-diff_priorReg, 1-diff_priorReg, diff_priorReg]
var diff_priorProbs_incongruent = [diff_priorReg, diff_priorReg, 1-diff_priorReg]
var rsaPredictions_diff_cong = expectation(pragmaticListener({label: "dax", point: 2 }, diff_priorProbs_congruent,   speakerOptimality))
var rsaPredictions_diff_incong = expectation(pragmaticListener({label: "dax", point: 2 }, diff_priorProbs_incongruent, speakerOptimality))
var same_priorReg =age_bin.same_priorReg_map
var same_priorProbs_congruent = [1-same_priorReg, 1-same_priorReg, same_priorReg]
var same_priorProbs_incongruent = [same_priorReg, same_priorReg, 1-same_priorReg]
var rsaPredictions_same_cong = expectation(pragmaticListener({label: "dax", point: 2 }, same_priorProbs_congruent, speakerOptimality))
var rsaPredictions_same_incong = expectation(pragmaticListener({label: "dax", point: 2 }, same_priorProbs_incongruent, speakerOptimality))
return extend(
{rsaPredictions_diff_cong,
rsaPredictions_diff_incong,
rsaPredictions_same_cong,
rsaPredictions_same_incong,
age_bin
})
}
var predictions_by_age = map(predict_by_age, modelParams)
predictions_by_age
'
model_pred<- webppl(
program_code = paste(rsaUtils, rsaModel, modelPredWebppl , sep='\n'),
data = list(ex3data = ex3_data, modelParams = model_params_by_age),
data_var = "dataFromR",
model_var = "predict_by_age",
chains = 1,
cores = 4,
inference_opts = list(method = "MCMC", samples = 10, burn = 1, verbose = T)
)
write_csv(model_params_by_age, "../saves/params_by_age.csv")
model_params_by_age <- read_csv(file="../saves/params_by_age.csv")
model_params_by_age
model_params_by_age
model_pred<- webppl(
program_code = paste(rsaUtils, rsaModel, modelPredWebppl , sep='\n'),
data = list(ex3data = ex3_data, modelParams = model_params_by_age),
data_var = "dataFromR",
model_var = "predict_by_age",
chains = 1,
cores = 4,
inference_opts = list(method = "MCMC", samples = 10, burn = 1, verbose = T)
)
modelPredWebppl <- '
var levels = function(df, label){
return _.uniq(_.map(df, label));
}
var ex3Data = dataFromR.ex3data
var modelParams = dataFromR.modelParams
//display(JSON.stringify(modelParams))
var foreach = function(fn, lst) {
var foreach_ = function(i) {
if (i < lst.length) {
fn(lst[i]);
foreach_(i + 1);
}
};
foreach_(0);
};
var logistic = function(x) {1 / (1 + Math.exp(-x))}
var predict_by_age = function(age_bin){
display(JSON.stringify(age_bin))
var speakerOptimality = age_bin[0].so_map
var diff_priorReg = age_bin.diff_priorReg_map
var diff_priorProbs_congruent = [1-diff_priorReg, 1-diff_priorReg, diff_priorReg]
var diff_priorProbs_incongruent = [diff_priorReg, diff_priorReg, 1-diff_priorReg]
var rsaPredictions_diff_cong = expectation(pragmaticListener({label: "dax", point: 2 }, diff_priorProbs_congruent,   speakerOptimality))
var rsaPredictions_diff_incong = expectation(pragmaticListener({label: "dax", point: 2 }, diff_priorProbs_incongruent, speakerOptimality))
var same_priorReg =age_bin.same_priorReg_map
var same_priorProbs_congruent = [1-same_priorReg, 1-same_priorReg, same_priorReg]
var same_priorProbs_incongruent = [same_priorReg, same_priorReg, 1-same_priorReg]
var rsaPredictions_same_cong = expectation(pragmaticListener({label: "dax", point: 2 }, same_priorProbs_congruent, speakerOptimality))
var rsaPredictions_same_incong = expectation(pragmaticListener({label: "dax", point: 2 }, same_priorProbs_incongruent, speakerOptimality))
return extend(
{rsaPredictions_diff_cong,
rsaPredictions_diff_incong,
rsaPredictions_same_cong,
rsaPredictions_same_incong,
age_bin
})
}
var predictions_by_age = map(predict_by_age, modelParams)
predictions_by_age
'
model_pred<- webppl(
program_code = paste(rsaUtils, rsaModel, modelPredWebppl , sep='\n'),
data = list(ex3data = ex3_data, modelParams = model_params_by_age),
data_var = "dataFromR",
model_var = "predict_by_age",
chains = 1,
cores = 4,
inference_opts = list(method = "MCMC", samples = 10, burn = 1, verbose = T)
)
## importing data
files <- dir("~/Work/MCC/git-mcc/kids_pref_data_2/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_pref_data_2/",f,sep="")
jd <- jsonlite::fromJSON(paste(readLines(jf), collapse=""))
date <- str_sub(jf,47,str_length(jf)-11)
id <- as_data_frame(jd$data$data) %>% mutate(test_date = date)
raw_data <- bind_rows(raw_data, id)
}
length(unique(raw_data$subid))
d_raw <-raw_data %>%
mutate(test_date = as.Date(test_date),
experiment = "mcc_kids_pref_2",
subid= ifelse(subid=="193101_1_inf2","190131_1_inf2",subid))
d_raw
raw_data
date <- str_sub(jf,45,str_length(jf)-11)
## importing data
files <- dir("~/Work/MCC/git-mcc/kids_pref_data_2/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_pref_data_2/",f,sep="")
jd <- jsonlite::fromJSON(paste(readLines(jf), collapse=""))
date <- str_sub(jf,45,str_length(jf)-11)
id <- as_data_frame(jd$data$data) %>% mutate(test_date = date)
raw_data <- bind_rows(raw_data, id)
}
raw_data
d_raw <-raw_data %>%
mutate(test_date = as.Date(test_date),
experiment = "mcc_kids_pref_2")
d_raw
log <- read_excel("../../../MCC-subject_log.xlsx", 1)%>%
filter(Condition == "pref2")%>%
select(subid,experimenter,keep_drop,sex,dob)
library(tidyverse)
library(knitr)
library(langcog)
library(ggthemes)
library(jsonlite)
library(readxl)
log <- read_excel("../../../MCC-subject_log.xlsx", 1)%>%
filter(Condition == "pref2")%>%
select(subid,experimenter,keep_drop,sex,dob)
length(unique(log$subid))
length(unique(raw_data$subid))
sum(log$keep_drop=="drop")
d <- left_join(d_raw,log, by = "subid")%>%
filter(keep_drop == "keep")%>%
mutate(dob = as.numeric(dob),
dob = as.Date(dob,origin = "1899-12-30"),
age_num = lubridate::time_length(difftime(test_date,dob), "years"),
check_age = ifelse(substr(age_num,1,1) == subage, T, F))
length(unique(d$subid))
## sanity checks
d %>%
group_by(trial_type) %>%
summarise(n = length(unique(subid)),
correct = mean(correct)) %>%
knitr::kable(digits = 2)
d %>%
group_by(subage)%>%
summarise(n = length(unique(subid)))%>%
knitr::kable(digits = 2)
p1 <- d %>%
filter(trial_type == "test") %>%
group_by(change,age, subid) %>%
summarise(correct = mean(correct))
d
p1 <- d %>%
filter(trial != "train") %>%
group_by(change,age, subid) %>%
summarise(correct = mean(correct))
d
p1 <- d %>%
filter(trial != "train") %>%
group_by(speakerChange,age, subid) %>%
summarise(correct = mean(correct))
p1 <- d %>%
filter(trial != "train") %>%
group_by(speakerChange,subage, subid) %>%
summarise(correct = mean(correct))
p2 <- p1 %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p1, aes(x = change, y = correct, col = change, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p2, aes(x = change, y = mean, col = change, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
facet_wrap(~age)+
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Speaker Change",
breaks=c("false", "true"),
labels=c("No", "Yes"))
ggplot() +
geom_jitter(data = p1, aes(x = speakerChange, y = correct, col = speakerChange, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p2, aes(x = speakerChange, y = mean, col = speakerChange, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
facet_wrap(~subage)+
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Speaker Change",
breaks=c("false", "true"),
labels=c("No", "Yes"))
d <- read_csv(file="data/kids_pref_data.csv")
d <- read_csv(file="../data/kids_pref_data.csv")
p1 <- d %>%
filter(trial_type == "test") %>%
group_by(change,age, subid) %>%
summarise(correct = mean(correct))
p2 <- p1 %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = p1, aes(x = change, y = correct, col = change, alpha = .2),width = .3,height = .025)+
geom_pointrange(data = p2, aes(x = change, y = mean, col = change, ymin = ci_lower, ymax = ci_upper),size = .8)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
facet_wrap(~age)+
ylim(-0.05,1.05)+
guides(alpha = F)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_colour_solarized(name="Speaker Change",
breaks=c("false", "true"),
labels=c("No", "Yes"))
## importing data
files <- dir("~/Work/MCC/git-mcc/kids_info_data_2/")
raw_data <- data_frame()
for (f in files) {
jf <- paste("~/Work/MCC/git-mcc/kids_info_data_2/",f,sep="")
jd <- jsonlite::fromJSON(paste(readLines(jf), collapse=""))
date <- str_sub(jf,47,str_length(jf)-11)
id <- as_data_frame(jd$data$data) %>% mutate(test_date = date)
raw_data <- bind_rows(raw_data, id)
}
length(unique(raw_data$subid))
d_raw <-raw_data %>%
mutate(test_date = as.Date(test_date),
experiment = "mcc_kids_inf_2_2",
subid= ifelse(subid=="193101_1_inf2","190131_1_inf2",subid))
log <- read_excel("../../../MCC-subject_log.xlsx", 1)%>%
filter(Condition == "inf2")%>%
select(subid,experimenter,keep_drop,sex,dob)
length(unique(log$subid))
sum(log$keep_drop=="drop")
d <- left_join(d_raw,log, by = "subid")%>%
filter(keep_drop == "keep")%>%
mutate(dob = as.numeric(dob),
dob = as.Date(dob,origin = "1899-12-30"),
age_num = lubridate::time_length(difftime(test_date,dob), "years"),
check_age = ifelse(substr(age_num,1,1) == subage, T, F))
length(unique(d$subid))
d %>%
group_by(subage)%>%
summarise(n = length(unique(subid)))%>%
knitr::kable(digits = 2)
d %>%
group_by(subage)%>%
summarise(n = length(unique(subid)))%>%
knitr::kable(digits = 2)
model_params_by_age <- params_by_age%>%
select(value) %>%
map_df(bind_rows)
model_params_by_age
model_params_by_age <- params_by_age%>%
select(value) %>%
map_df(bind_rows)
model_params_by_age
model_params_by_age <- params_by_age%>%
select(value) %>%
map_df(bind_rows)%>%
group_by(age_bin)%>%
summarise(so_map = estimate_mode(speakerOptimality),
diff_priorReg_map = estimate_mode(diff_priorReg),
same_priorReg_map = estimate_mode(same_priorReg))
model_params_by_age <- params_by_age%>%
select(value) %>%
map_df(bind_rows)%>%
group_by(age_bin)%>%
summarise(so_map = estimate_mode(speakerOptimality),
diff_priorReg_map = estimate_mode(diff_priorReg),
same_priorReg_map = estimate_mode(same_priorReg))
str(model_params_by_age)
model_params_by_age$age_bin
x = model_params_by_age$age_bin
x
model_params_by_age <- params_by_age%>%
select(value) %>%
map_df(bind_rows)%>%
group_by(age_bin)%>%
summarise(so_map = estimate_mode(speakerOptimality),
diff_priorReg_map = estimate_mode(diff_priorReg),
same_priorReg_map = estimate_mode(same_priorReg))%>%
ungroup()
model_params_by_age <- params_by_age%>%
select(value) %>%
map_df(bind_rows)%>%
group_by(age_bin)%>%
summarise(so_map = estimate_mode(speakerOptimality),
diff_priorReg_map = estimate_mode(diff_priorReg),
same_priorReg_map = estimate_mode(same_priorReg))%>%
ungroup()
pref_data <- read_csv(file="../data/kids_pref_data.csv")%>%
filter(age != "2",
trial_type != "train")%>%
mutate(age_bin = factor(age),
experiment = "preference_pretest",
condition = ifelse(change == F | change == "false", "same_speaker", "different_speaker"),
agent = ifelse( change == F | change == "false", agent, altAgent),
minage = min(age_num))%>%
select(experiment,subid,age_bin,age_num,trial,condition,agent,correct,minage)
inf_data <- read_csv(file="../data/kids_inf_data.csv")%>%
filter(subage != "2",
trial != "filler1",
trial != "filler2")%>%
mutate(age_bin = factor(subage),
experiment = "informativeness_pretest",
condition = ifelse(control == "no", "test", "control"),
minage = min(age_num))%>%
select(experiment,subid,age_bin,age_num,trial,condition,agent,correct,minage)
pre_data <- bind_rows(pref_data,
inf_data)
ex3_data <- read_csv(file="../data/kids_ex3_data.csv")
pre_so <- pre_data %>%
filter(experiment == "informativeness_pretest")%>%
group_by(age_num,subid)%>%
summarise(correct = mean(correct))
plot_inf <- ggplot(data = pre_so, aes(x = age_num, y = correct)) +
geom_jitter(alpha = 1, height = 0.1, width = 0.1, col = "grey")+
geom_smooth(method = "lm", se = T, col = "black",fill = "darkgreen", alpha = .4, size = .4)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="age",y="Proportion Expected Choice")+
theme_few() +
ggtitle("Informativeness data")+
ylim(-0.05,1.05)+
guides(alpha = F)+
coord_fixed(ratio = 2)
pre_prior <- pre_data %>%
filter(experiment == "preference_pretest")%>%
group_by(condition,age_num,subid)%>%
summarise(correct = mean(correct))
plot_pref <- ggplot(data = pre_prior, aes(x = age_num, y = correct, col = condition)) +
geom_jitter(alpha = 0.5, height = 0.1, width = 0.1)+
geom_smooth(aes(fill = condition),method = "lm", se = T, col = "black",  alpha = .5, size = .4)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few() +
ggtitle("Preference data")+
ylim(-0.05,1.05)+
guides(alpha = F)+
coord_fixed(ratio = 2)+
scale_color_solarized()+
scale_fill_solarized()
plot_pref
plot_pref <- ggplot(data = pre_prior, aes(x = age_num, y = correct, col = condition)) +
geom_jitter(alpha = 0.5, height = 0.1, width = 0.1)
plot_pref
