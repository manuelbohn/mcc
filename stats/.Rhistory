alignment = c("congruent","incongruent","congruent","incongruent","congruent","incongruent","congruent","incongruent"),
prior_manipulation = rep("medium",8))
medium_prior_pref_same <- adult_ex4_prior_data %>%
filter(common_ground_manipulation == "preference",
prior_manipulation == "medium",
speaker == "same_speaker")%>%
summarise(prior = mean(correct))
medium_prior_pref_diff <- adult_ex4_prior_data %>%
filter(common_ground_manipulation == "preference",
prior_manipulation == "medium",
speaker == "different_speaker")%>%
summarise(prior = mean(correct))
medium_prior_novel_same <- adult_ex4_prior_data %>%
filter(common_ground_manipulation == "novelty",
prior_manipulation == "medium",
speaker == "same_speaker")%>%
summarise(prior = mean(correct))
medium_prior_novel_diff <- adult_ex4_prior_data %>%
filter(common_ground_manipulation == "novelty",
prior_manipulation == "medium",
speaker == "different_speaker")%>%
summarise(prior = mean(correct))
mediumPrior$prior = list(
c(1-medium_prior_pref_same$prior,1-medium_prior_pref_same$prior,medium_prior_pref_same$prior),
c(medium_prior_pref_same$prior,medium_prior_pref_same$prior,1-medium_prior_pref_same$prior),
c(1-medium_prior_pref_diff$prior,1-medium_prior_pref_diff$prior,medium_prior_pref_diff$prior),
c(medium_prior_pref_diff$prior,medium_prior_pref_diff$prior,1-medium_prior_pref_diff$prior),
c(1-medium_prior_novel_same$prior,1-medium_prior_novel_same$prior,medium_prior_novel_same$prior),
c(medium_prior_novel_same$prior,medium_prior_novel_same$prior,1-medium_prior_novel_same$prior),
c(1-medium_prior_novel_diff$prior,1-medium_prior_novel_diff$prior,medium_prior_novel_diff$prior),
c(medium_prior_novel_diff$prior,medium_prior_novel_diff$prior,1-medium_prior_novel_diff$prior))
weakPrior <- data.frame(
common_ground_manipulation = c("novelty","novelty","novelty","novelty"),
speaker = c("same_speaker","same_speaker","different_speaker","different_speaker"),
alignment = c("congruent","incongruent","congruent","incongruent"),
prior_manipulation = rep("weak",4))
weak_prior_novel_same <- adult_ex4_prior_data %>%
filter(common_ground_manipulation == "novelty",
prior_manipulation == "weak",
speaker == "same_speaker")%>%
summarise(prior = mean(correct))
weak_prior_novel_diff <- adult_ex4_prior_data %>%
filter(common_ground_manipulation == "novelty",
prior_manipulation == "weak",
speaker == "different_speaker")%>%
summarise(prior = mean(correct))
weakPrior$prior = list(
c(1-weak_prior_novel_same$prior,1-weak_prior_novel_same$prior,weak_prior_novel_same$prior),
c(weak_prior_novel_same$prior,weak_prior_novel_same$prior,1-weak_prior_novel_same$prior),
c(1-weak_prior_novel_diff$prior,1-weak_prior_novel_diff$prior,weak_prior_novel_diff$prior),
c(weak_prior_novel_diff$prior,weak_prior_novel_diff$prior,1-weak_prior_novel_diff$prior))
# combining all priors into one data frame
model_params_ex4 = rbind(strongPrior,mediumPrior,weakPrior)%>%
mutate(speak_opt = adult_model_param$so_map)
predictions.rsa.ex4 <-'
var allData = dataFromR.data
var output = map(function(row){
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, row.prior,row.speak_opt)
return extend([row.common_ground_manipulation + "/" + row.prior_manipulation + "/" + row.speaker + "/" + row.alignment + "/" + row.correct_inf, Math.exp(modelPredictions.score(1))])
}, allData)
output
'
ex4_pragm_model<- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex4 , sep='\n'),
data =list(data = model_params_ex4),
data_var = "dataFromR"
)
# model predictions
ex4_pragm_model_predictions <- ex4_pragm_model %>%
separate(`0`, into = c("common_ground_manipulation","prior_manipulation", "speaker", "alignment"), sep="/")%>%
mutate(value = `1`,
model="pragmatic")%>%
select(-`1`)
predictions.prior.only.ex4 <-'
var allData = dataFromR.data
var output = map(function(row){
var modelPredictions = Infer({method: "enumerate", model: function(){
var obj = sample( Categorical({vs: all_objects, ps: row.prior}));
return obj.shape == "circle" ? 1 : 0
}})
return extend([row.common_ground_manipulation + "/" + row.prior_manipulation + "/" + row.speaker + "/" + row.alignment + "/" + row.correct_inf, Math.exp(modelPredictions.score(1))])
}, allData)
output
'
ex4_prior_only_model<- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.prior.only.ex4 , sep='\n'),
data =list(data = model_params_ex4),
data_var = "dataFromR"
)
# model predictions
ex4_prior_only_model_predictions <- ex4_prior_only_model %>%
separate(`0`, into = c("common_ground_manipulation","prior_manipulation", "speaker", "alignment"), sep="/")%>%
mutate(value = `1`,
model="prior_only")%>%
select(-`1`)
predictions.flat.prior.ex4 <-'
var allData = dataFromR.data
var prior = [.5, .5, .5]
var output = map(function(row){
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, prior,row.speak_opt)
return extend([row.common_ground_manipulation + "/" + row.prior_manipulation + "/" + row.speaker + "/" + row.alignment + "/" + row.correct_inf, Math.exp(modelPredictions.score(1))])
}, allData)
output
'
ex4_flat_prior_model<- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.flat.prior.ex4 , sep='\n'),
data =list(data = model_params_ex4),
data_var = "dataFromR"
)
# model predictions
ex4_flat_prior_model_predictions <- ex4_flat_prior_model %>%
separate(`0`, into = c("common_ground_manipulation","prior_manipulation", "speaker", "alignment"), sep="/")%>%
mutate(value = `1`,
model="flat_prior")%>%
select(-`1`)
# combine model predictions with data
# summarize data
adult_ex4_data_summary <- adult_ex4_data %>%
mutate(prior_manipulation = relevel(as.factor(prior_manipulation), ref = "strong"))%>%
mutate(model = "data") %>%
group_by(model,common_ground_manipulation,prior_manipulation,speaker,alignment)%>%
summarize(k = sum(correct_inf), n = n())%>%
ungroup() %>%
mutate(a = 1 + k,
b = 1 + n - k,
ci_lower  = qbeta(.025, a, b),
ci_upper = qbeta(.975, a, b),
mean = (a-1)/(a+b-2))%>%
select(-a,-b,-n,-k)
# summarize model predictions
ex_4_model_pred <- bind_rows(
ex4_pragm_model_predictions,
ex4_prior_only_model_predictions,
ex4_flat_prior_model_predictions
)%>%
mutate(prior_manipulation = relevel(as.factor(prior_manipulation), ref = "strong"))%>%
group_by(model,common_ground_manipulation,prior_manipulation,speaker,alignment)%>%
summarise(mean = mean(value))%>%
mutate(ci_lower = mean,
ci_upper = mean)
# combine model predictions and data
ex_4_pred <- bind_rows(
ex_4_model_pred,
adult_ex4_data_summary
)
#saveRDS(ex_4_pred, "../../stats/saves/adult_ex4_model_predictions_data.rds")
ggplot(data = ex_4_pred, aes(x = alignment, y = mean, col = model)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), size = .4,  position = position_dodge(width = .5), pch = 5)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Choosing More Informative")+
facet_grid ( prior_manipulation ~ common_ground_manipulation + speaker) +
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
scale_color_manual(name="Model",
breaks=c("data","pragmatic","flat_prior","prior_only"),
values= c("black","#859900","#6c71c4","#b58900"))+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust = 1))
ex_4_cor_plot <- ex_4_pred %>%
ungroup()%>%
filter(model != "data") %>%
mutate(data_mean = rep(ex_4_pred%>%filter(model == "data")%>%pull(mean),3),
data_ci_lower = rep(ex_4_pred%>%filter(model == "data")%>%pull(ci_lower),3),
data_ci_upper = rep(ex_4_pred%>%filter(model == "data")%>%pull(ci_upper),3))
ggplot(data = ex_4_cor_plot,aes(x = mean, y = data_mean, col = prior_manipulation)) +
geom_abline(intercept = 0, slope = 1, lty = 2, alpha = 0.7, size = 0.5)+
geom_point(size = 2)+
geom_errorbar(aes(ymin = data_ci_lower, ymax = data_ci_upper),width = 0,size = .7)+
geom_errorbarh(aes(xmin = ci_lower, xmax = ci_upper), height = 0,size = .7)+
coord_fixed()+
xlim(0,1)+ylim(0,1)+
xlab("Model")+
ylab("Data")+
facet_grid ( ~ model) +
stat_cor(method = "pearson", label.x = 0.01, label.y = 0.99, aes(x = mean, y = data_mean), inherit.aes = F, size = 3)+
theme_few(base_size = ) +
scale_colour_ptol()
# calculating model log-likelihoods
log_like_pragmatic_ex4 <- adult_ex4_data %>%
left_join(ex4_pragm_model_predictions)%>%
mutate(like = ifelse(correct_inf == "1",value,1-value),
log_like = log(like))%>%
group_by(model)%>%
summarise(model_log_like = sum(log_like))
log_like_flat_prior_ex4 <- adult_ex4_data %>%
left_join(ex4_flat_prior_model_predictions)%>%
mutate(like = ifelse(correct_inf == "1",value,1-value),
log_like = log(like))%>%
group_by(model)%>%
summarise(model_log_like = sum(log_like))
log_like_prior_only_ex4 <- adult_ex4_data %>%
left_join(ex4_prior_only_model_predictions)%>%
mutate(like = ifelse(correct_inf == "1",value,1-value),
log_like = log(like))%>%
group_by(model)%>%
summarise(model_log_like = sum(log_like))
ex4_model_comparison <- bind_rows(
log_like_pragmatic_ex4,
log_like_flat_prior_ex4,
log_like_prior_only_ex4
)%>%
mutate(model = reorder(model,model_log_like))
ggplot(ex4_model_comparison, aes(x = model, y = model_log_like, col = model))+
geom_segment( aes(x=model, xend=model, y=-1500, yend=model_log_like), col = "black", size = 1)+
geom_point(size = 7)+
theme_few()+
xlab("Model")+
ylab("Log-likelihood")+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust = 1))+
guides(col = F)+
scale_color_manual(breaks=c("pragmatic","prior_only","flat_prior"),
values= c("#b58900","#859900","#6c71c4"))
ex4_bf <- data.frame(
comparison = c("pragmatic vs. flat_prior","pragmatic vs. prior_only", "flat_rior vs. prior_only"),
log_bayes_factor = c(
log_like_pragmatic_ex4$model_log_like - log_like_flat_prior_ex4$model_log_like,
log_like_pragmatic_ex4$model_log_like- log_like_prior_only_ex4$model_log_like,
log_like_flat_prior_ex4$model_log_like - log_like_prior_only_ex4$model_log_like)
)
ex4_bf%>%
kable(digits = 2)
# Cauchy prior on the speaker optimality parameter around 1, based on previous work (e.g. Frank & Goodman, 2014)
speakOptParam <- '
var data = dataFromR.data
var model  = function(){
var speakerOptimality = sample(Cauchy({location: 1, scale: 1}))
foreach(function(row){
var priorProbs = [.5, .5, .5]
var rsaPredictions = pragmaticListener({label: "dax", point: 2 },
priorProbs, speakerOptimality)
observe(rsaPredictions, row.correct)
}, data)
return speakerOptimality
}
'
adult_model_param<- webppl(
program_code = paste(rsaUtils, rsaModel, speakOptParam , sep='\n'),
data = list(data = adult_ex1_data%>%filter(condition == "test")),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 2000, verbose = T))
adult_model_param <- readRDS("../../stats/saves/adult_model_param.rds")%>%
select(value) %>%
summarise(so_map = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
adult_model_param<- webppl(
program_code = paste(rsaUtils, rsaModel, speakOptParam , sep='\n'),
data = list(data = adult_ex1_data%>%filter(condition == "test")),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 2000, verbose = T))
adult_model_param <- adult_model_param%>%
select(value) %>%
summarise(so_map = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
adult_model_param
# create datafiles with model parameters
model_params_ex3 <- data.frame(
common_ground_manipulation = c("preference","preference","preference","preference","novelty","novelty","novelty","novelty"),
speaker = c("same_speaker","same_speaker","different_speaker","different_speaker","same_speaker","same_speaker","different_speaker","different_speaker"),
alignment = c("congruent","incongruent","congruent","incongruent","congruent","incongruent","congruent","incongruent"),
speak_opt = adult_model_param$so_map)
prior_pref_same <- adult_ex2_preference_data %>%
filter(condition == "same_speaker")%>%
summarise(prior = mean(correct))
prior_pref_diff <- adult_ex2_preference_data %>%
filter(condition == "different_speaker")%>%
summarise(prior = mean(correct))
prior_novel_same <- adult_ex2_novelty_data %>%
filter(condition == "same_speaker")%>%
summarise(prior = mean(correct))
prior_novel_diff <- adult_ex2_novelty_data %>%
filter(condition == "different_speaker")%>%
summarise(prior = mean(correct))
model_params_ex3$prior = list(
c(1-prior_pref_same$prior,1-prior_pref_same$prior,prior_pref_same$prior),
c(prior_pref_same$prior,prior_pref_same$prior,1-prior_pref_same$prior),
c(1-prior_pref_diff$prior,1-prior_pref_diff$prior,prior_pref_diff$prior),
c(prior_pref_diff$prior,prior_pref_diff$prior,1-prior_pref_diff$prior),
c(1-prior_novel_same$prior,1-prior_novel_same$prior,prior_novel_same$prior),
c(prior_novel_same$prior,prior_novel_same$prior,1-prior_novel_same$prior),
c(1-prior_novel_diff$prior,1-prior_novel_diff$prior,prior_novel_diff$prior),
c(prior_novel_diff$prior,prior_novel_diff$prior,1-prior_novel_diff$prior))
predictions.rsa.ex3 <-'
var allData = dataFromR.data
var output = map(function(row){
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, row.prior,row.speak_opt)
return extend([row.common_ground_manipulation + "/" + row.speaker + "/" + row.alignment + "/" + row.correct_inf, Math.exp(modelPredictions.score(1))])
}, allData)
output
'
ex3_pragm_model<- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.rsa.ex3 , sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR"
)
# model predictions
ex3_pragm_model_predictions <- ex3_pragm_model %>%
separate(`0`, into = c("common_ground_manipulation", "speaker", "alignment"), sep="/")%>%
mutate(value = `1`,
model="pragmatic")%>%
select(-`1`)
predictions.prior.only.ex3 <-'
var allData = dataFromR.data
var output = map(function(row){
var modelPredictions = Infer({method: "enumerate", model: function(){
var obj = sample( Categorical({vs: all_objects, ps: row.prior}));
return obj.shape == "circle" ? 1 : 0
}})
return extend([row.common_ground_manipulation + "/" + row.speaker + "/" + row.alignment + "/" + row.correct_inf, Math.exp(modelPredictions.score(1))])
}, allData)
output
'
ex3_prior_only_model<- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.prior.only.ex3 , sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR"
)
# model predictions
ex3_prior_only_model_predictions <- ex3_prior_only_model %>%
separate(`0`, into = c("common_ground_manipulation", "speaker", "alignment"), sep="/")%>%
mutate(value = `1`,
model="prior_only")%>%
select(-`1`)
predictions.flat.prior.ex3 <-'
var allData = dataFromR.data
var prior = [.5, .5, .5]
var output = map(function(row){
var modelPredictions = pragmaticListener({label: "dax", point: 2 }, prior,row.speak_opt)
return extend([row.common_ground_manipulation + "/" + row.speaker + "/" + row.alignment + "/" + row.correct_inf, Math.exp(modelPredictions.score(1))])
}, allData)
output
'
ex3_flat_prior_model<- webppl(
program_code = paste(rsaUtils, rsaModel, predictions.flat.prior.ex3 , sep='\n'),
data =list(data = model_params_ex3),
data_var = "dataFromR"
)
# model predictions
ex3_flat_prior_model_predictions <- ex3_flat_prior_model %>%
separate(`0`, into = c("common_ground_manipulation", "speaker", "alignment"), sep="/")%>%
mutate(value = `1`,
model="flat_prior")%>%
select(-`1`)
# combine model predictions with data
# summarize data
adult_ex3_data_summary <- adult_ex3_data %>%
mutate(model = "data") %>%
group_by(model,common_ground_manipulation,speaker,alignment)%>%
summarize(k = sum(correct_inf), n = n())%>%
ungroup() %>%
mutate(a = 1 + k,
b = 1 + n - k,
ci_lower  = qbeta(.025, a, b),
ci_upper = qbeta(.975, a, b),
mean = (a-1)/(a+b-2))%>%
select(-a,-b,-n,-k)
# summarize model predictions
ex_3_model_pred <- bind_rows(
ex3_pragm_model_predictions,
ex3_prior_only_model_predictions,
ex3_flat_prior_model_predictions
)%>%
group_by(model,common_ground_manipulation,speaker,alignment)%>%
summarise(mean = mean(value))%>%
mutate(ci_lower = mean,
ci_upper = mean)
# combine model predictions and data
ex_3_pred <- bind_rows(
ex_3_model_pred,
adult_ex3_data_summary
)
#saveRDS(ex_3_pred, "../../stats/saves/adult_ex3_model_predictions_data.rds")
ggplot(data = ex_3_pred, aes(x = alignment, y = mean, col = model)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), size = .4,  position = position_dodge(width = .5), pch = 5)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Choosing More Informative")+
facet_grid (~ common_ground_manipulation + speaker) +
theme_few() +
ylim(-0.05,1.05)+
guides(alpha = F)+
scale_color_manual(name="Model",
breaks=c("data","pragmatic","flat_prior","prior_only"),
values= c("black","#859900","#6c71c4","#b58900"))+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust = 1))
ex_3_cor_plot <- ex_3_pred %>%
ungroup()%>%
filter(model != "data") %>%
mutate(data_mean = rep(ex_3_pred%>%filter(model == "data")%>%pull(mean),3),
data_ci_lower = rep(ex_3_pred%>%filter(model == "data")%>%pull(ci_lower),3),
data_ci_upper = rep(ex_3_pred%>%filter(model == "data")%>%pull(ci_upper),3))
ggplot(data = ex_3_cor_plot,aes(x = mean, y = data_mean, col = "#BB5566")) +
geom_abline(intercept = 0, slope = 1, lty = 2, alpha = 0.7, size = 0.5)+
geom_point(size = 2)+
geom_errorbar(aes(ymin = data_ci_lower, ymax = data_ci_upper),width = 0,size = .7)+
geom_errorbarh(aes(xmin = ci_lower, xmax = ci_upper), height = 0,size = .7)+
coord_fixed()+
xlim(0,1)+ylim(0,1)+
xlab("Model")+
ylab("Data")+
guides(col = F)+
facet_grid ( ~ model) +
stat_cor(method = "pearson", label.x = 0.01, label.y = 0.99, aes(x = mean, y = data_mean), inherit.aes = F, size = 3)+
theme_few()
# calculating model log-likelihoods
log_like_pragmatic_ex3 <- adult_ex3_data %>%
left_join(ex3_pragm_model_predictions)%>%
mutate(like = ifelse(correct_inf == "1",value,1-value),
log_like = log(like))%>%
group_by(model)%>%
summarise(model_log_like = sum(log_like))
log_like_flat_prior_ex3 <- adult_ex3_data %>%
left_join(ex3_flat_prior_model_predictions)%>%
mutate(like = ifelse(correct_inf == "1",value,1-value),
log_like = log(like))%>%
group_by(model)%>%
summarise(model_log_like = sum(log_like))
log_like_prior_only_ex3 <- adult_ex3_data %>%
left_join(ex3_prior_only_model_predictions)%>%
mutate(like = ifelse(correct_inf == "1",value,1-value),
log_like = log(like))%>%
group_by(model)%>%
summarise(model_log_like = sum(log_like))
ex3_model_comparison <- bind_rows(
log_like_pragmatic_ex3,
log_like_flat_prior_ex3,
log_like_prior_only_ex3
)%>%
mutate(model = reorder(model,model_log_like))
ggplot(ex3_model_comparison, aes(x = model, y = model_log_like, col = model))+
geom_segment( aes(x=model, xend=model, y=-600, yend=model_log_like), col = "black", size = 1)+
geom_point(size = 7)+
theme_few()+
xlab("Model")+
ylab("Log-likelihood")+
theme(axis.text.x=element_text(angle = 45, vjust = 1, hjust = 1))+
guides(col = F)+
scale_color_manual(breaks=c("pragmatic","prior_only","flat_prior"),
values= c("#b58900","#859900","#6c71c4"))
# Cauchy prior on the speaker optimality parameter around 1, based on previous work (e.g. Frank & Goodman, 2014)
speakOptParam <- '
var data = dataFromR.data
var model  = function(){
var speakerOptimality = sample(Cauchy({location: 0, scale: 1}))
foreach(function(row){
var priorProbs = [.5, .5, .5]
var rsaPredictions = pragmaticListener({label: "dax", point: 2 },
priorProbs, speakerOptimality)
observe(rsaPredictions, row.correct)
}, data)
return speakerOptimality
}
'
adult_model_param<- webppl(
program_code = paste(rsaUtils, rsaModel, speakOptParam , sep='\n'),
data = list(data = adult_ex1_data%>%filter(condition == "test")),
data_var = "dataFromR",
model_var = "model",
chains = 4,
cores = 4,
inference_opts = list(method = "MCMC", samples = 2000, burn = 2000, verbose = T))
adult_model_param <- adult_model_param%>%
select(value) %>%
summarise(so_map = estimate_mode(value),
ci_lower = hdi_lower(value),
ci_upper = hdi_upper(value))
adult_model_param
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(knitr)
library(ggthemes)
library(langcog)
library(rwebppl)
library(coda)
library(ggpubr)
estimate_mode <- function(s) {
d <- density(s)
return(d$x[which.max(d$y)])
}
hdi_upper<- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","upper"])
}
hdi_lower<- function(s){
m <- HPDinterval(mcmc(s))
return(m["var1","lower"])
}
# adults exp 1
adult_ex1_data <- read_csv(file="../../stats/data/adult_ex1.csv")
# load data from prior manipulation experiments to set priors
adult_ex2_novelty_data <- read_csv(file="../../stats/data/adult_ex2_novelty.csv")
adult_ex2_preference_data <- read_csv(file="../../stats/data/adult_ex2_preference.csv")
# Cauchy prior on the speaker optimality parameter around 1, based on previous work (e.g. Frank & Goodman, 2014)
speakOptParam <- '
var data = dataFromR.data
var model  = function(){
var speakerOptimality = sample(Cauchy({location: 0, scale: 1}))
foreach(function(row){
var priorProbs = [.5, .5, .5]
var rsaPredictions = pragmaticListener({label: "dax", point: 2 },
priorProbs, speakerOptimality)
observe(rsaPredictions, row.correct)
}, data)
return speakerOptimality
}
'
